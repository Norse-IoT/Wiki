{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Norse IoT Club's Official Wiki The Norse IoT club is focused on student led research and projects concerning Internet of Things devices and applications. Through this student organization, we hope to foster a community for students, faculty, alumni, and industry establishments that are enthusiastic about the opportunities IoT has to offer. Club Resources Our Website contains general information about the club. Our GitHub contains project code, making it a great place to start learning. Our Discord is a great way to connect with members of the community. Our Google Drive contains miscellaneous project resources, as well as club marketing materials. Our CampusGroups contains official club details, including a list of upcoming meetings. Edit access to the GitHub and Google Drive are available on request. Just DM one of our Officers on Discord with your GitHub username or Google Drive email. Getting Started A great place to start is our Getting Started guide for ESP-32 development. ESP-32 micrcocontrollers are the basis of most Norse IoT projects, and this guide covers how to set up an ESP-32 and start programming for it. What's this Wiki? The goal of this wiki is to be a one stop shop for concrete information, including tips for getting started with projects, and links to useful long term resources about our projects.","title":"Home"},{"location":"#welcome-to-the-norse-iot-clubs-official-wiki","text":"The Norse IoT club is focused on student led research and projects concerning Internet of Things devices and applications. Through this student organization, we hope to foster a community for students, faculty, alumni, and industry establishments that are enthusiastic about the opportunities IoT has to offer.","title":"Welcome to the Norse IoT Club's Official Wiki"},{"location":"#club-resources","text":"Our Website contains general information about the club. Our GitHub contains project code, making it a great place to start learning. Our Discord is a great way to connect with members of the community. Our Google Drive contains miscellaneous project resources, as well as club marketing materials. Our CampusGroups contains official club details, including a list of upcoming meetings. Edit access to the GitHub and Google Drive are available on request. Just DM one of our Officers on Discord with your GitHub username or Google Drive email.","title":"Club Resources"},{"location":"#getting-started","text":"A great place to start is our Getting Started guide for ESP-32 development. ESP-32 micrcocontrollers are the basis of most Norse IoT projects, and this guide covers how to set up an ESP-32 and start programming for it.","title":"Getting Started"},{"location":"#whats-this-wiki","text":"The goal of this wiki is to be a one stop shop for concrete information, including tips for getting started with projects, and links to useful long term resources about our projects.","title":"What's this Wiki?"},{"location":"calendar/","text":"Calendar Here is our current plan for the year. If there's a topic you want us to cover, feel free to reach out to club leadership or mention it in the Discord . Spring 2025 Undated Topics: Dr. Tony Tsetse Zack - Rust Date Presenter Topic 2024-01-13 Zack Sargent Establish project interest and leads 2024-01-27 Zack Sargent https://github.com/stefmolin/pandas-workshop 2024-02-03 Ken Roth Solar Panels 2024-02-10 Izaac Gomez OnShape & 3d modeling 2024-02-17 Zack Sargent MicroPython 2024-02-24 Ken Roth 3d printing 2024-03-03 Aaron, Toby, & Grace NFC game 2024-03-17 Zack Sargent Ruby on Rails E-Board Candidates Open 2024-03-24 Aaron Milner E-Board Candidates Open Board Game Day!! 2024-03-31 Aaron Milner E-Board Election (Nominations Open) 2024-04-07 2024-04-14 2024-04-21 2024-04-28 Fall 2024 Date Presenter Topic CampusGroups Link 2024-09-10 Steve Hinkel Club Kickoff: Robots, Pizza, and Power https://cglink.me/2vf/r376696 2024-09-17 Zack Sargent Getting Started (ESP32, Arduino) https://cglink.me/2vf/r376698 2024-09-24 Zack Sargent Pulse Width Modulation https://cglink.me/2vf/r376700 2024-10-01 Zack Sargent MQTT publishers https://cglink.me/2vf/r376701 2024-10-08 Candice Van Loveren Geis Wearables Workshop (required sign-up) 2024-10-15 ( tentative ) BLINK working group https://cglink.me/2vf/r376703 2024-10-22 Zack Sargent Control LEDs via webserver https://cglink.me/2vf/r376704 2024-10-29 Tyler Kobida IoT CTF https://cglink.me/2vf/r376705 2024-11-05 Uncle Sam Election Day https://cglink.me/2vf/r376706 2024-11-12 Zack Sargent Dawson College Learn and Robot Lab https://cglink.me/2vf/r376707 2024-11-19 Zack Sargent Dawson College Learn and Robot Lab https://cglink.me/2vf/r376708 2024-11-26 Zack Sargent React Day!! https://cglink.me/2vf/r376709 2024-12-03 Zack Sargent Inspect & Adapt Workshop https://cglink.me/2vf/r376710","title":"Calendar"},{"location":"calendar/#calendar","text":"Here is our current plan for the year. If there's a topic you want us to cover, feel free to reach out to club leadership or mention it in the Discord .","title":"Calendar"},{"location":"calendar/#spring-2025","text":"Undated Topics: Dr. Tony Tsetse Zack - Rust Date Presenter Topic 2024-01-13 Zack Sargent Establish project interest and leads 2024-01-27 Zack Sargent https://github.com/stefmolin/pandas-workshop 2024-02-03 Ken Roth Solar Panels 2024-02-10 Izaac Gomez OnShape & 3d modeling 2024-02-17 Zack Sargent MicroPython 2024-02-24 Ken Roth 3d printing 2024-03-03 Aaron, Toby, & Grace NFC game 2024-03-17 Zack Sargent Ruby on Rails E-Board Candidates Open 2024-03-24 Aaron Milner E-Board Candidates Open Board Game Day!! 2024-03-31 Aaron Milner E-Board Election (Nominations Open) 2024-04-07 2024-04-14 2024-04-21 2024-04-28","title":"Spring 2025"},{"location":"calendar/#fall-2024","text":"Date Presenter Topic CampusGroups Link 2024-09-10 Steve Hinkel Club Kickoff: Robots, Pizza, and Power https://cglink.me/2vf/r376696 2024-09-17 Zack Sargent Getting Started (ESP32, Arduino) https://cglink.me/2vf/r376698 2024-09-24 Zack Sargent Pulse Width Modulation https://cglink.me/2vf/r376700 2024-10-01 Zack Sargent MQTT publishers https://cglink.me/2vf/r376701 2024-10-08 Candice Van Loveren Geis Wearables Workshop (required sign-up) 2024-10-15 ( tentative ) BLINK working group https://cglink.me/2vf/r376703 2024-10-22 Zack Sargent Control LEDs via webserver https://cglink.me/2vf/r376704 2024-10-29 Tyler Kobida IoT CTF https://cglink.me/2vf/r376705 2024-11-05 Uncle Sam Election Day https://cglink.me/2vf/r376706 2024-11-12 Zack Sargent Dawson College Learn and Robot Lab https://cglink.me/2vf/r376707 2024-11-19 Zack Sargent Dawson College Learn and Robot Lab https://cglink.me/2vf/r376708 2024-11-26 Zack Sargent React Day!! https://cglink.me/2vf/r376709 2024-12-03 Zack Sargent Inspect & Adapt Workshop https://cglink.me/2vf/r376710","title":"Fall 2024"},{"location":"hardware/","text":"Norse IoT Official Hardware Listings This page contains a list of all hardware purchased by the club, as well as Amazon listings to purchase additional hardware should more be needed. Click the ID to view the Amazon listing. ID Description Use B0718T232Z ESP-32 Microcontroller - powers most club projects. B07WPCPM5H OLED Screen Used for displaying content. B07F3TV3G4 Time of Flight Sensor Used for detecting motion. B08VRJ28LF e-paper Display Used for displaying static content. B08K2NNWBD Ultrasonic Sensor Used for detecting presence. B096P5K9W1 Piezoelectric Buzzers Basic speakers, limited to chirps. B07LFD4LT6 Breadboards Used to connect devices without solder.","title":"Hardware"},{"location":"hardware/#norse-iot-official-hardware-listings","text":"This page contains a list of all hardware purchased by the club, as well as Amazon listings to purchase additional hardware should more be needed. Click the ID to view the Amazon listing. ID Description Use B0718T232Z ESP-32 Microcontroller - powers most club projects. B07WPCPM5H OLED Screen Used for displaying content. B07F3TV3G4 Time of Flight Sensor Used for detecting motion. B08VRJ28LF e-paper Display Used for displaying static content. B08K2NNWBD Ultrasonic Sensor Used for detecting presence. B096P5K9W1 Piezoelectric Buzzers Basic speakers, limited to chirps. B07LFD4LT6 Breadboards Used to connect devices without solder.","title":"Norse IoT Official Hardware Listings"},{"location":"inventory/","text":"Norse IoT Inventory This inventory reflects all hardware owned and used by the club. ESP-32s ID Description Owner 000 Humidity Sensor Reference Model Chris Brewer 001 Free N/A 002 Free N/A 003 Free N/A 004 Free N/A 005 Free N/A 006 Free N/A 007 Free N/A 008 Free N/A 009 Free N/A 010 Free N/A 011 Free N/A 012 Free N/A 013 Free N/A 014 Free N/A 015 Free N/A 016 MIA Chris Brewer 017 Fractal Zoom Riley Weber-Horowitz 018 Free N/A 019 Free N/A 020 Zack Light Show Demo Zack Sargent 021 Freezerburn Project Joseph Galluci 022 Free N/A 023 Ultrasonic Demo Christian Lane 024 Ultrasonic Grace Wu 025 Our Favourite Child Grace Wu 026 Unknown Piezo Project Chris Brewer 027 Ultrasonic Percentage Chris Brewer 028 Websocket LED Demo Chris Brewer 029 Frankencaster Cassian Godsted 030 Free N/A 031 Free N/A","title":"Inventory"},{"location":"inventory/#norse-iot-inventory","text":"This inventory reflects all hardware owned and used by the club.","title":"Norse IoT Inventory"},{"location":"inventory/#esp-32s","text":"ID Description Owner 000 Humidity Sensor Reference Model Chris Brewer 001 Free N/A 002 Free N/A 003 Free N/A 004 Free N/A 005 Free N/A 006 Free N/A 007 Free N/A 008 Free N/A 009 Free N/A 010 Free N/A 011 Free N/A 012 Free N/A 013 Free N/A 014 Free N/A 015 Free N/A 016 MIA Chris Brewer 017 Fractal Zoom Riley Weber-Horowitz 018 Free N/A 019 Free N/A 020 Zack Light Show Demo Zack Sargent 021 Freezerburn Project Joseph Galluci 022 Free N/A 023 Ultrasonic Demo Christian Lane 024 Ultrasonic Grace Wu 025 Our Favourite Child Grace Wu 026 Unknown Piezo Project Chris Brewer 027 Ultrasonic Percentage Chris Brewer 028 Websocket LED Demo Chris Brewer 029 Frankencaster Cassian Godsted 030 Free N/A 031 Free N/A","title":"ESP-32s"},{"location":"meeting-checklist/","text":"Meeting Checklist Before Meeting Send announcement on Discord Send announcement via CampusGroups email During Meeting Introduce club members Review Scrum Board (standup) Review assignments \u2014 each person says: What they've been doing What they're going to do Issues / problems they've faced Assign new stories, if necessary Create new stories, if necessary Work on projects. Help new members get up to speed Give existing members space to work on their interests","title":"Meeting Checklist"},{"location":"meeting-checklist/#meeting-checklist","text":"","title":"Meeting Checklist"},{"location":"pinout/","text":"Technical Info (ESP-32) Pinout Guide Features Pin ID Pin Location CENTER Pin Location Pin ID Features 3.3V 3.3V 1 GND 38 GND EN EN 2 GIOP23 37 VSPI MOSI ADC 0 GIOP 36 3 GIOP22 36 I2C SCL ADC 3 GIOP 39 4 GIOP 1 35 TX0 - PWM ADC 6 GIOP 34 5 GIOP 3 34 RX0 - PWM ADC 7 GIOP 35 6 GIOP 21 33 i2C SDA TOUCH 9 - ADC 4 GIOP 32 7 GND 32 GND TOUCH 8 - ADC 5 GIOP 33 8 GIOP 19 31 VSPI MISO DAC 1 ADC 18 GIOP 25 9 GIOP 18 30 VSPI SCK DAC 2 ADC 19 GIOP 26 10 GIOP 5 29 VSPI SS - PWM TOUCH 7 - ADC 17 - PWM GIOP 27 11 GIOP 17 28 TX2 TOUCH 6 - ADC 16 - PWM GIOP 14 12 GIOP 16 27 RX2 TOUCH 5 - ADC 15 - PWM GIOP 12 13 GIOP 4 26 ADC 10 - TOUCH 0 - PWM GND GND 14 GIOP 0 25 ADC 11 - TOUCH 1 - PWM TOUCH 4 - ADC 14 - PWM GIOP 13 15 GIOP 2 24 ADC 12 - TOUCH 2 - PWM RX 1 - FLASH D2 - PWM GIOP 9 16 GIOP 15 23 ADC 13 - TOUCH 3 - PWM TX 1 - FLASH D3 - PWM GIOP 10 17 GIOP8 22 FLASH D1 - PWM FLASH CMD - PWM GIOP 11 18 GIOP7 21 FLASH D0 - PWM 5V 5V 19 GIOP6 20 FLASH CK - PWM","title":"Technical Info (ESP-32)"},{"location":"pinout/#technical-info-esp-32","text":"","title":"Technical Info (ESP-32)"},{"location":"pinout/#pinout-guide","text":"Features Pin ID Pin Location CENTER Pin Location Pin ID Features 3.3V 3.3V 1 GND 38 GND EN EN 2 GIOP23 37 VSPI MOSI ADC 0 GIOP 36 3 GIOP22 36 I2C SCL ADC 3 GIOP 39 4 GIOP 1 35 TX0 - PWM ADC 6 GIOP 34 5 GIOP 3 34 RX0 - PWM ADC 7 GIOP 35 6 GIOP 21 33 i2C SDA TOUCH 9 - ADC 4 GIOP 32 7 GND 32 GND TOUCH 8 - ADC 5 GIOP 33 8 GIOP 19 31 VSPI MISO DAC 1 ADC 18 GIOP 25 9 GIOP 18 30 VSPI SCK DAC 2 ADC 19 GIOP 26 10 GIOP 5 29 VSPI SS - PWM TOUCH 7 - ADC 17 - PWM GIOP 27 11 GIOP 17 28 TX2 TOUCH 6 - ADC 16 - PWM GIOP 14 12 GIOP 16 27 RX2 TOUCH 5 - ADC 15 - PWM GIOP 12 13 GIOP 4 26 ADC 10 - TOUCH 0 - PWM GND GND 14 GIOP 0 25 ADC 11 - TOUCH 1 - PWM TOUCH 4 - ADC 14 - PWM GIOP 13 15 GIOP 2 24 ADC 12 - TOUCH 2 - PWM RX 1 - FLASH D2 - PWM GIOP 9 16 GIOP 15 23 ADC 13 - TOUCH 3 - PWM TX 1 - FLASH D3 - PWM GIOP 10 17 GIOP8 22 FLASH D1 - PWM FLASH CMD - PWM GIOP 11 18 GIOP7 21 FLASH D0 - PWM 5V 5V 19 GIOP6 20 FLASH CK - PWM","title":"Pinout Guide"},{"location":"getting-started/","text":"Getting Started This tutorial covers how to get started developing for the ESP-32 using the Arduino IDE. These instructions will cover installing Arduino IDE on Windows, Mac, or Linux, installing any needed drivers, as well the add-on for Arduino to use our ESP-32 microcontrollers. Installing Arduino IDE We'll start by installing the Arduino IDE 2.0 . You can download the IDE from the Arduino website for your operating system. Windows : Download the version for Win 10 and newer, and run the executable. Linux : Download the AppImage, and run the executable. On Fedora Linux 39, Zack had issues with the AppImage. The IDEv2 flatpak package worked first try. On Ubuntu 22.04 LTS, Cassian had no issues with the AppImage. macOS : Download the Apple Silicon version for newer Macs, and the Intel version for older Macs. Open the downloaded disk image, and copy the Arduino IDE to your application folder. For Ashok, the normal download had some issues with esp32's default.csv , and we used the Homebrew Cask with no issues. If you run into issues, you can find more information in the Arduino Docs . Adding ESP-32 Devices into the Board Manager The next step is adding ESP-32s to the list of devices Arduino IDE can install to. In your Arduino IDE, choose File > Preferences . Copy and paste the following URL into the Additional Board manager URLs textbox. https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json Open the Boards Manager by clicking the Boards Manager icon on the sidebar - the icon below the folder icon. Search for ESP32, and press the install button for the esp32 by ExpressIf Systems. Installing the Drivers (Windows) This section is only needed when installing Arduino on Windows 10 and Windows 11. On Windows, Arduino needs an additional driver to write to ESP-32 devices. You can download the driver from Silicon Labs' website . Open the ZIP file, and from there choose to extract the file. Launch CP210xVCPInstaller_x64.exe and follow the installation wizard. Installing pyserial and Updating Permissions (Linux) This section is only needed when installing Arduino on Linux desktops like Ubuntu. Install pyserial using pip. If you don't have pip installed, you can install Python from your package manager. sudo apt install python3 pip install pyserial By default, Arduino is not allowed to write to the serial port. You can change that with the following command. sudo chmod 666 /dev/ttyUSB0 Testing the Installation Plug the ESP-32 board into your computer, and follow these steps in the Arduino IDE. Click the Select Board dropdown. If you see a board show up, you're on the right track! Click the Unknown board. Mac users may see \"Bluetooth-Incoming-Port Serial Port\" by default. This does not mean their ESP-32 is connected. Mac users will want something like /dev/cu.usbserial-#### Serial Port (USB) . You'll then be brought to the Other Boards menu. Search for devkit and click on the DOIT ESP32 DEVKIT V1 . Copy and paste the following code into the IDE to test the Internal Blink demo. int pin = LED_BUILTIN ; void setup () { pinMode ( pin , OUTPUT ); } bool state = HIGH ; void loop () { digitalWrite ( pin , state ); state = ! state ; delay ( 1000 ); } Press the Upload button in the top left corner. Your code will begin to compile. When you see dots begin to move across the screen in the bottom terminal, press and hold the button to the right of the Micro-USB power connector to accept the new code. Once you see the text \"Hard resetting...\" in the bottom of the terminal, you should be done uploading and can release the button. Press the button to the left of the Micro-USB power connector to reset the ESP-32 and run your new code. If all went according to plan, your ESP-32 is now flashing its blue LED. More Info If all went well, you're ready to go developing ESP-32 projects with the Norse IoT club! We have various projects in our Wiki, and you can look around on the internet to find additional project ideas.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This tutorial covers how to get started developing for the ESP-32 using the Arduino IDE. These instructions will cover installing Arduino IDE on Windows, Mac, or Linux, installing any needed drivers, as well the add-on for Arduino to use our ESP-32 microcontrollers.","title":"Getting Started"},{"location":"getting-started/#installing-arduino-ide","text":"We'll start by installing the Arduino IDE 2.0 . You can download the IDE from the Arduino website for your operating system. Windows : Download the version for Win 10 and newer, and run the executable. Linux : Download the AppImage, and run the executable. On Fedora Linux 39, Zack had issues with the AppImage. The IDEv2 flatpak package worked first try. On Ubuntu 22.04 LTS, Cassian had no issues with the AppImage. macOS : Download the Apple Silicon version for newer Macs, and the Intel version for older Macs. Open the downloaded disk image, and copy the Arduino IDE to your application folder. For Ashok, the normal download had some issues with esp32's default.csv , and we used the Homebrew Cask with no issues. If you run into issues, you can find more information in the Arduino Docs .","title":"Installing Arduino IDE"},{"location":"getting-started/#adding-esp-32-devices-into-the-board-manager","text":"The next step is adding ESP-32s to the list of devices Arduino IDE can install to. In your Arduino IDE, choose File > Preferences . Copy and paste the following URL into the Additional Board manager URLs textbox. https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json Open the Boards Manager by clicking the Boards Manager icon on the sidebar - the icon below the folder icon. Search for ESP32, and press the install button for the esp32 by ExpressIf Systems.","title":"Adding ESP-32 Devices into the Board Manager"},{"location":"getting-started/#installing-the-drivers-windows","text":"This section is only needed when installing Arduino on Windows 10 and Windows 11. On Windows, Arduino needs an additional driver to write to ESP-32 devices. You can download the driver from Silicon Labs' website . Open the ZIP file, and from there choose to extract the file. Launch CP210xVCPInstaller_x64.exe and follow the installation wizard.","title":"Installing the Drivers (Windows)"},{"location":"getting-started/#installing-pyserial-and-updating-permissions-linux","text":"This section is only needed when installing Arduino on Linux desktops like Ubuntu. Install pyserial using pip. If you don't have pip installed, you can install Python from your package manager. sudo apt install python3 pip install pyserial By default, Arduino is not allowed to write to the serial port. You can change that with the following command. sudo chmod 666 /dev/ttyUSB0","title":"Installing pyserial and Updating Permissions (Linux)"},{"location":"getting-started/#testing-the-installation","text":"Plug the ESP-32 board into your computer, and follow these steps in the Arduino IDE. Click the Select Board dropdown. If you see a board show up, you're on the right track! Click the Unknown board. Mac users may see \"Bluetooth-Incoming-Port Serial Port\" by default. This does not mean their ESP-32 is connected. Mac users will want something like /dev/cu.usbserial-#### Serial Port (USB) . You'll then be brought to the Other Boards menu. Search for devkit and click on the DOIT ESP32 DEVKIT V1 . Copy and paste the following code into the IDE to test the Internal Blink demo. int pin = LED_BUILTIN ; void setup () { pinMode ( pin , OUTPUT ); } bool state = HIGH ; void loop () { digitalWrite ( pin , state ); state = ! state ; delay ( 1000 ); } Press the Upload button in the top left corner. Your code will begin to compile. When you see dots begin to move across the screen in the bottom terminal, press and hold the button to the right of the Micro-USB power connector to accept the new code. Once you see the text \"Hard resetting...\" in the bottom of the terminal, you should be done uploading and can release the button. Press the button to the left of the Micro-USB power connector to reset the ESP-32 and run your new code. If all went according to plan, your ESP-32 is now flashing its blue LED.","title":"Testing the Installation"},{"location":"getting-started/#more-info","text":"If all went well, you're ready to go developing ESP-32 projects with the Norse IoT club! We have various projects in our Wiki, and you can look around on the internet to find additional project ideas.","title":"More Info"},{"location":"getting-started/basic-button/","text":"Getting Started - Basic Button Project This is basic; More detail should go here later. To Do: Connect a wire from GND to one side of the button. Connect a wire to pin 21 Put a button on the breadboard. Take note that standard buttons are connected on the sides, so they need to span the center of the breadboard. const int button_pin = 21 ; const int light_pin = 2 ; void setup () { // initialize the pushbutton pin as an pull-up input pinMode ( light_pin , OUTPUT ); pinMode ( button_pin , INPUT_PULLUP ); } void loop () { bool currentState = digitalRead ( button_pin ); if ( currentState == HIGH ) { digitalWrite ( light_pin , HIGH ); } else { digitalWrite ( light_pin , LOW ); } }","title":"Getting Started - Basic Button Project"},{"location":"getting-started/basic-button/#getting-started-basic-button-project","text":"This is basic; More detail should go here later. To Do: Connect a wire from GND to one side of the button. Connect a wire to pin 21 Put a button on the breadboard. Take note that standard buttons are connected on the sides, so they need to span the center of the breadboard. const int button_pin = 21 ; const int light_pin = 2 ; void setup () { // initialize the pushbutton pin as an pull-up input pinMode ( light_pin , OUTPUT ); pinMode ( button_pin , INPUT_PULLUP ); } void loop () { bool currentState = digitalRead ( button_pin ); if ( currentState == HIGH ) { digitalWrite ( light_pin , HIGH ); } else { digitalWrite ( light_pin , LOW ); } }","title":"Getting Started - Basic Button Project"},{"location":"getting-started/first-project/","text":"Getting Started - LED via Serial You can control your builtin led via the serial monitor in your Arduino IDE. If you've recently started with the Blink demo, you should have something that looks like this: const int pin = LED_BUILTIN ; void setup () { pinMode ( pin , OUTPUT ); } bool state = HIGH ; void loop () { digitalWrite ( pin , state ); state = ! state ; delay ( 1000 ); } So, now you should be able to control whether the internal id is on or off. If you enter \"on\" into the Serial prompt, it should turn the LED on. If you enter \"off\" into the Serial prompt, it will turn the LED off. const int pin = LED_BUILTIN ; void setup () { pinMode ( pin , OUTPUT ); Serial . begin ( 115200 ); } bool state = HIGH ; void loop () { digitalWrite ( pin , state ); Serial . print ( \"The pin state is: \" ); Serial . println ( state ); // Serial.readStringUntil pauses for a short // duration to see if the user has sent any data, but // it does not wait forever like Scanner#nextLine() in Java. String input = Serial . readStringUntil ( '\\n' ); Serial . print ( \"recieved: \" ); Serial . println ( input ); if ( input . equals ( \"on\" )) { state = HIGH ; } else if ( input . equals ( \"off\" )) { state = LOW ; } }","title":"Getting Started - LED via Serial"},{"location":"getting-started/first-project/#getting-started-led-via-serial","text":"You can control your builtin led via the serial monitor in your Arduino IDE. If you've recently started with the Blink demo, you should have something that looks like this: const int pin = LED_BUILTIN ; void setup () { pinMode ( pin , OUTPUT ); } bool state = HIGH ; void loop () { digitalWrite ( pin , state ); state = ! state ; delay ( 1000 ); } So, now you should be able to control whether the internal id is on or off. If you enter \"on\" into the Serial prompt, it should turn the LED on. If you enter \"off\" into the Serial prompt, it will turn the LED off. const int pin = LED_BUILTIN ; void setup () { pinMode ( pin , OUTPUT ); Serial . begin ( 115200 ); } bool state = HIGH ; void loop () { digitalWrite ( pin , state ); Serial . print ( \"The pin state is: \" ); Serial . println ( state ); // Serial.readStringUntil pauses for a short // duration to see if the user has sent any data, but // it does not wait forever like Scanner#nextLine() in Java. String input = Serial . readStringUntil ( '\\n' ); Serial . print ( \"recieved: \" ); Serial . println ( input ); if ( input . equals ( \"on\" )) { state = HIGH ; } else if ( input . equals ( \"off\" )) { state = LOW ; } }","title":"Getting Started - LED via Serial"},{"location":"getting-started/wiki/","text":"Getting Started - Wiki Editing This section of the getting started guide will cover how to edit the Norse IoT Club Wiki. The Norse IoT Wiki makes use of Mkdocs to create a space for long term project documentation. Project notes are written in Markdown. Markdown is an open file format that's easy to read and write. Variants of Markdown are used used by GitHub, Reddit, Discord, and more. You can familiarize yourself with the basics of Markdown with the Markdown Guide . The Wiki also supports writing direct HTML, if Markdown doesn't work for your specific idea. You'll notice that every page on the Wiki (including this one!) has an \"Edit on GitHub\" button in the bottom left corner. Once you've joined the club's GitHub, you can click this button to view this page on GitHub. On GitHub, you can click the edit button in the top right corner, and you'll be taken to an editing view. You can type your notes as normal, and use the Preview button above the text editor to confirm that links and images work correctly. Once you're done, you can click the green \"Commit changes...\" button to make your change public to the Wiki!","title":"Getting Started - Wiki Editing"},{"location":"getting-started/wiki/#getting-started-wiki-editing","text":"This section of the getting started guide will cover how to edit the Norse IoT Club Wiki. The Norse IoT Wiki makes use of Mkdocs to create a space for long term project documentation. Project notes are written in Markdown. Markdown is an open file format that's easy to read and write. Variants of Markdown are used used by GitHub, Reddit, Discord, and more. You can familiarize yourself with the basics of Markdown with the Markdown Guide . The Wiki also supports writing direct HTML, if Markdown doesn't work for your specific idea. You'll notice that every page on the Wiki (including this one!) has an \"Edit on GitHub\" button in the bottom left corner. Once you've joined the club's GitHub, you can click this button to view this page on GitHub. On GitHub, you can click the edit button in the top right corner, and you'll be taken to an editing view. You can type your notes as normal, and use the Preview button above the text editor to confirm that links and images work correctly. Once you're done, you can click the green \"Commit changes...\" button to make your change public to the Wiki!","title":"Getting Started - Wiki Editing"},{"location":"meetings/2024-03-17/","text":"2024-03-17 - Ruby on Rails Today, we're going to be briefly dipping our toes into Ruby on Rails. Ruby on Rails is a great way to build a website as a solo developer. Ruby on Rails was initially released in 2004, and is widely used across many big companies . Today, we're going to demo of the power of Ruby on Rails. Then, we'll start with the basics of Ruby. This is what we will be using today: This demo on Ruby on Rails https://www.jdoodle.com/execute-ruby-online Demo You don't need to follow along with this. This is to serve as a motivation as to why to learn Ruby/Ruby on Rails. Installation You can install Ruby on Rails here: https://guides.rubyonrails.org/install_ruby_on_rails.html Creating a project Let's create a new project! This project is going to be themed around Sam's Rat Tickling certification. We can run: rails new ratcert To create a new project called \"ratcert\". This follows the \"Convention over Configuration\" part of Rail's doctrine . They know what you'll need, so they add it for you. In this basic project, you get your Model, View, and Controller (MVC), as well as your mailers (for email), jobs (for background jobs), and Hotwire . So, now we have a basic project, ready to go! Let's start modelling! Our project is going to represent a few basic parts of a website built to manager rat tickling certifications. Let's create the ability to keep track of rats. One of the superpowers of Ruby on Rails is its code \"scaffolds\" . We can run: rails generate scaffold rat name:string birthday:date To generate a rat that has a string name, and a birthday date. You can see all the files this created in the output of the command. Now, we can run: rails db:migrate # create the rat structure in the database rails server # start the server You should be greeted with something like this: We can navigate to /rats to see a list of our rats. We can click \"new rat\" to create a rat. I'll demo some more features of the webui here. But, let's take a second to see where this comes from. The scaffold has created some views, which we can interact with: The scaffold has also created a database migration: class CreateRats < ActiveRecord :: Migration [ 8 . 0 ] def change create_table :rats do | t | t . string :name t . date :birthday t . timestamps end end end This is another power of ruby: to abstract away the database you're using. Read more about this here: https://guides.rubyonrails.org/active_record_migrations.html#migration-overview Note that this is bi-directional, so that this can both create and destroy these fields in our database. We also created a Rat, which just inherits everything from the database: # this is our \"model\" class Rat < ApplicationRecord end It's also created a controller in ./app/controllers/rats_controller.rb that we should look through and explain. Creating a Tickler! So, rats can be tickled by one person, and each person may tickle many rats. We can create a Tickler like this: rails generate scaffold tickler name :string email : uniq rails db : migrate This means each tickler has a name, which it uses as its index ( read more here ), and an email which must be unique. For more info on associations, read this: https://guides.rubyonrails.org/association_basics.html Improving our Tickler At this point, we can just put anything into our form. That's not great, let's add some validations! We can add these lines to the model, to ensure any new data is valid: class Tickler < ApplicationRecord # validates that the name is present validates_presence_of :name # validate that the email exists, and is in the right format validates_uniqueness_of :email validates :email , format : { with : URI :: MailTo :: EMAIL_REGEXP } end (Here's the bit where Zack demonstrates this at http://127.0.0.1:3000/ticklers ) Creating a relationship So, let's define a relationship between our rats and rat ticklers. The documentation at https://guides.rubyonrails.org/association_basics.html#types-of-associations is great, so read that first. Then, let's create a one-to-many relationship: (I think IRL this should be a many-to-many relationship , but that's a little complex for right now.) class Rat < ApplicationRecord belongs_to :tickler end class Tickler < ApplicationRecord # validates that the name is present validates_presence_of :name # validate that the email exists, and is in the right format validates_uniqueness_of :email validates :email , format : { with : URI :: MailTo :: EMAIL_REGEXP } has_many :rats end Now let's update the views to show this relationship: Rats # app/views/rats/_form.html.erb < div > < %= form.label :tickler_id, style: \"display: block\" %> <%= form . collection_select :tickler_id , Tickler . all , :id , :name , prompt : true %> </div> # app/views/rats/show.html.erb < div > < strong > Tickler : < /strong> <%= @rat.tickler&.name %> </ div > Ticklers # app/views/ticklers/show.html.erb <h2>Rats</h2> <ul> <% @tickler.rats.each do |rat| %> <li><%= link_to \"Rat ##{rat.id}\", rat %></li> <% end %> </ul> <%= link_to 'New Rat', new_rat_path(tickler_id: @tickler.id) %> Also, we need to create a field on our Rat that associates it with a Tickler. We can do so here: rails generate migration AddTicklerIdToRats tickler_id:integer And we need to update the controller's expected parameters: # app/controllers/rats_controller.rb private # Use callbacks to share common setup or constraints between actions. def set_rat @rat = Rat . find ( params . expect ( :id )) end # Only allow a list of trusted parameters through. def rat_params params . expect ( rat : [ :name , :birthday , :tickler_id ] ) end More Power: Like LLMs? I found this recently, and thought it highlighted the beauty of both Ruby and Rails: https://github.com/crmne/ruby_llm?tab=readme-ov-file#rails-integration-that-makes-sense I thought the tool feature was very nice. Ruby Okay, now let's review the features of Ruby that made all of that so powerful. Let's check out: https://learnxinyminutes.com/ruby/ https://blog.appsignal.com/2021/08/24/responsible-monkeypatching-in-ruby.html https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/ruby#basic-ruby https://medium.com/@camfeg/dynamic-method-definition-with-rubys-define-method-b3ffbbee8197 Further reading: https://learnxinyminutes.com/ruby/ The creator of Ruby on Rails giving a demo of its features https://www.theodinproject.com/paths/full-stack-ruby-on-rails https://guides.rubyonrails.org/getting_started.html https://www.destroyallsoftware.com/talks/boundaries https://github.com/fpsvogel/learn-ruby https://poignant.guide/book/chapter-3.html ...the past 20 years of blog posts from various developers...","title":"2024-03-17 - Ruby on Rails"},{"location":"meetings/2024-03-17/#2024-03-17-ruby-on-rails","text":"Today, we're going to be briefly dipping our toes into Ruby on Rails. Ruby on Rails is a great way to build a website as a solo developer. Ruby on Rails was initially released in 2004, and is widely used across many big companies . Today, we're going to demo of the power of Ruby on Rails. Then, we'll start with the basics of Ruby. This is what we will be using today: This demo on Ruby on Rails https://www.jdoodle.com/execute-ruby-online","title":"2024-03-17 - Ruby on Rails"},{"location":"meetings/2024-03-17/#demo","text":"You don't need to follow along with this. This is to serve as a motivation as to why to learn Ruby/Ruby on Rails.","title":"Demo"},{"location":"meetings/2024-03-17/#installation","text":"You can install Ruby on Rails here: https://guides.rubyonrails.org/install_ruby_on_rails.html","title":"Installation"},{"location":"meetings/2024-03-17/#creating-a-project","text":"Let's create a new project! This project is going to be themed around Sam's Rat Tickling certification. We can run: rails new ratcert To create a new project called \"ratcert\". This follows the \"Convention over Configuration\" part of Rail's doctrine . They know what you'll need, so they add it for you. In this basic project, you get your Model, View, and Controller (MVC), as well as your mailers (for email), jobs (for background jobs), and Hotwire . So, now we have a basic project, ready to go!","title":"Creating a project"},{"location":"meetings/2024-03-17/#lets-start-modelling","text":"Our project is going to represent a few basic parts of a website built to manager rat tickling certifications. Let's create the ability to keep track of rats. One of the superpowers of Ruby on Rails is its code \"scaffolds\" . We can run: rails generate scaffold rat name:string birthday:date To generate a rat that has a string name, and a birthday date. You can see all the files this created in the output of the command. Now, we can run: rails db:migrate # create the rat structure in the database rails server # start the server You should be greeted with something like this: We can navigate to /rats to see a list of our rats. We can click \"new rat\" to create a rat. I'll demo some more features of the webui here. But, let's take a second to see where this comes from. The scaffold has created some views, which we can interact with: The scaffold has also created a database migration: class CreateRats < ActiveRecord :: Migration [ 8 . 0 ] def change create_table :rats do | t | t . string :name t . date :birthday t . timestamps end end end This is another power of ruby: to abstract away the database you're using. Read more about this here: https://guides.rubyonrails.org/active_record_migrations.html#migration-overview Note that this is bi-directional, so that this can both create and destroy these fields in our database. We also created a Rat, which just inherits everything from the database: # this is our \"model\" class Rat < ApplicationRecord end It's also created a controller in ./app/controllers/rats_controller.rb that we should look through and explain.","title":"Let's start modelling!"},{"location":"meetings/2024-03-17/#creating-a-tickler","text":"So, rats can be tickled by one person, and each person may tickle many rats. We can create a Tickler like this: rails generate scaffold tickler name :string email : uniq rails db : migrate This means each tickler has a name, which it uses as its index ( read more here ), and an email which must be unique. For more info on associations, read this: https://guides.rubyonrails.org/association_basics.html","title":"Creating a Tickler!"},{"location":"meetings/2024-03-17/#improving-our-tickler","text":"At this point, we can just put anything into our form. That's not great, let's add some validations! We can add these lines to the model, to ensure any new data is valid: class Tickler < ApplicationRecord # validates that the name is present validates_presence_of :name # validate that the email exists, and is in the right format validates_uniqueness_of :email validates :email , format : { with : URI :: MailTo :: EMAIL_REGEXP } end (Here's the bit where Zack demonstrates this at http://127.0.0.1:3000/ticklers )","title":"Improving our Tickler"},{"location":"meetings/2024-03-17/#creating-a-relationship","text":"So, let's define a relationship between our rats and rat ticklers. The documentation at https://guides.rubyonrails.org/association_basics.html#types-of-associations is great, so read that first. Then, let's create a one-to-many relationship: (I think IRL this should be a many-to-many relationship , but that's a little complex for right now.) class Rat < ApplicationRecord belongs_to :tickler end class Tickler < ApplicationRecord # validates that the name is present validates_presence_of :name # validate that the email exists, and is in the right format validates_uniqueness_of :email validates :email , format : { with : URI :: MailTo :: EMAIL_REGEXP } has_many :rats end Now let's update the views to show this relationship:","title":"Creating a relationship"},{"location":"meetings/2024-03-17/#rats","text":"# app/views/rats/_form.html.erb < div > < %= form.label :tickler_id, style: \"display: block\" %> <%= form . collection_select :tickler_id , Tickler . all , :id , :name , prompt : true %> </div> # app/views/rats/show.html.erb < div > < strong > Tickler : < /strong> <%= @rat.tickler&.name %> </ div >","title":"Rats"},{"location":"meetings/2024-03-17/#ticklers","text":"# app/views/ticklers/show.html.erb <h2>Rats</h2> <ul> <% @tickler.rats.each do |rat| %> <li><%= link_to \"Rat ##{rat.id}\", rat %></li> <% end %> </ul> <%= link_to 'New Rat', new_rat_path(tickler_id: @tickler.id) %> Also, we need to create a field on our Rat that associates it with a Tickler. We can do so here: rails generate migration AddTicklerIdToRats tickler_id:integer And we need to update the controller's expected parameters: # app/controllers/rats_controller.rb private # Use callbacks to share common setup or constraints between actions. def set_rat @rat = Rat . find ( params . expect ( :id )) end # Only allow a list of trusted parameters through. def rat_params params . expect ( rat : [ :name , :birthday , :tickler_id ] ) end","title":"Ticklers"},{"location":"meetings/2024-03-17/#more-power-like-llms","text":"I found this recently, and thought it highlighted the beauty of both Ruby and Rails: https://github.com/crmne/ruby_llm?tab=readme-ov-file#rails-integration-that-makes-sense I thought the tool feature was very nice.","title":"More Power: Like LLMs?"},{"location":"meetings/2024-03-17/#ruby","text":"Okay, now let's review the features of Ruby that made all of that so powerful. Let's check out: https://learnxinyminutes.com/ruby/ https://blog.appsignal.com/2021/08/24/responsible-monkeypatching-in-ruby.html https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/ruby#basic-ruby https://medium.com/@camfeg/dynamic-method-definition-with-rubys-define-method-b3ffbbee8197 Further reading: https://learnxinyminutes.com/ruby/ The creator of Ruby on Rails giving a demo of its features https://www.theodinproject.com/paths/full-stack-ruby-on-rails https://guides.rubyonrails.org/getting_started.html https://www.destroyallsoftware.com/talks/boundaries https://github.com/fpsvogel/learn-ruby https://poignant.guide/book/chapter-3.html ...the past 20 years of blog posts from various developers...","title":"Ruby"},{"location":"meetings/2024-11-26/","text":"2024-11-26 - React Data Visualization Let's talk about React today! Quickly discuss the motivations of React Connection: Church-Turing Thesis UI = f(state) Bonus Reading: UI = f(data, state) Interactive Lessons Learn React on react.dev Thinking in React Bonus reading: Keeping Components Pure Bonus reading: Describing the UI install React here Other playgrounds https://playcode.io/react https://codesandbox.io/ https://stackblitz.com/edit/react-playground-practice?file=index.js Useful component libraries https://mui.com/ https://ant.design/ https://ui.shadcn.com/docs","title":"2024-11-26 - React Data Visualization"},{"location":"meetings/2024-11-26/#2024-11-26-react-data-visualization","text":"Let's talk about React today! Quickly discuss the motivations of React Connection: Church-Turing Thesis UI = f(state) Bonus Reading: UI = f(data, state) Interactive Lessons Learn React on react.dev Thinking in React Bonus reading: Keeping Components Pure Bonus reading: Describing the UI install React here Other playgrounds https://playcode.io/react https://codesandbox.io/ https://stackblitz.com/edit/react-playground-practice?file=index.js Useful component libraries https://mui.com/ https://ant.design/ https://ui.shadcn.com/docs","title":"2024-11-26 - React Data Visualization"},{"location":"meetings/2025-02-17/","text":"2025-02-17 - Let's learn MicroPython Unrelated Cool Thing https://espargos.net/ https://www.youtube.com/watch?v=sXwDrcd1t-E What's the difference between MicroPython and CircuitPython: MicroPython is a flexible and memory-efficient Python implementation for microcontrollers, supporting a wide range of hardware with advanced features but requiring manual setup. CircuitPython is a beginner-friendly fork of MicroPython, designed for ease of use with Adafruit hardware, offering plug-and-play functionality and built-in libraries. Today, we're working with MicroPython. C++ is 400x as fast as MicroPython https://youtu.be/u9UfKTOcYNs Here is a lab: https://github.com/tomas-fryza/esp-micropython?tab=readme-ov-file We can get started an Esp32: https://wokwi.com/projects/new/micropython-esp32 Here are a bunch of Wokwi Projects you may find interesting: Name Project \u2b50 Esp32 \u2b50 https://wokwi.com/projects/new/micropython-esp32 Raspberry Pi Pico https://wokwi.com/projects/new/micropython-pi-pico LED https://wokwi.com/projects/338502152832942675 OLED https://wokwi.com/projects/359558101922696193 LCD https://wokwi.com/projects/359400194112248833 Pan & tilt https://wokwi.com/projects/422969230314295297 MQTT https://wokwi.com/projects/374335118460288001 PWM https://wokwi.com/projects/393431078922482689 Servo Blog https://blog.wokwi.com/learn-servo-motor-using-wokwi-logic-analyzer/ PWM Blog https://blog.wokwi.com/explore-pwm-with-logic-analyzer/","title":"2025-02-17 - Let's learn MicroPython"},{"location":"meetings/2025-02-17/#2025-02-17-lets-learn-micropython","text":"","title":"2025-02-17 - Let's learn MicroPython"},{"location":"meetings/2025-02-17/#unrelated-cool-thing","text":"https://espargos.net/ https://www.youtube.com/watch?v=sXwDrcd1t-E","title":"Unrelated Cool Thing"},{"location":"meetings/2025-02-17/#whats-the-difference-between-micropython-and-circuitpython","text":"MicroPython is a flexible and memory-efficient Python implementation for microcontrollers, supporting a wide range of hardware with advanced features but requiring manual setup. CircuitPython is a beginner-friendly fork of MicroPython, designed for ease of use with Adafruit hardware, offering plug-and-play functionality and built-in libraries. Today, we're working with MicroPython.","title":"What's the difference between MicroPython and CircuitPython:"},{"location":"meetings/2025-02-17/#c-is-400x-as-fast-as-micropython","text":"","title":"C++ is 400x as fast as MicroPython"},{"location":"meetings/2025-02-17/#httpsyoutubeu9ufktocyns","text":"Here is a lab: https://github.com/tomas-fryza/esp-micropython?tab=readme-ov-file We can get started an Esp32: https://wokwi.com/projects/new/micropython-esp32 Here are a bunch of Wokwi Projects you may find interesting: Name Project \u2b50 Esp32 \u2b50 https://wokwi.com/projects/new/micropython-esp32 Raspberry Pi Pico https://wokwi.com/projects/new/micropython-pi-pico LED https://wokwi.com/projects/338502152832942675 OLED https://wokwi.com/projects/359558101922696193 LCD https://wokwi.com/projects/359400194112248833 Pan & tilt https://wokwi.com/projects/422969230314295297 MQTT https://wokwi.com/projects/374335118460288001 PWM https://wokwi.com/projects/393431078922482689 Servo Blog https://blog.wokwi.com/learn-servo-motor-using-wokwi-logic-analyzer/ PWM Blog https://blog.wokwi.com/explore-pwm-with-logic-analyzer/","title":"https://youtu.be/u9UfKTOcYNs"},{"location":"projects/","text":"All Projects Fractal Zoom is a demo of image playback on an ESP-32. Tech Olympics 2025 , a websocket workshop designed for Tech Olympics 2025. Tech Olympics 2024 , a wifi enabled smart sensor workshop designed for Tech Olympics 2024. Website Workshops , a guide to making a basic resume page hosted on a NKU Network Drive (or GitHub Pages!) Rust on ESP32 , let's get Rust y \ud83e\udd80 \ud83e\udd80 \ud83e\udd80","title":"All Projects"},{"location":"projects/#all-projects","text":"Fractal Zoom is a demo of image playback on an ESP-32. Tech Olympics 2025 , a websocket workshop designed for Tech Olympics 2025. Tech Olympics 2024 , a wifi enabled smart sensor workshop designed for Tech Olympics 2024. Website Workshops , a guide to making a basic resume page hosted on a NKU Network Drive (or GitHub Pages!) Rust on ESP32 , let's get Rust y \ud83e\udd80 \ud83e\udd80 \ud83e\udd80","title":"All Projects"},{"location":"projects/0-project-overview/","text":"Projects Overview Here is the list of projects that we are considering in Spring 2025. We are looking for leadership positions. Printer Tower Project Lead: Tyler Kobida Discuss Robot John Project Lead: Izaac Gomez Discuss Cat Feeder Project Lead: Izaac Gomez Clove Natale Crew: Zack Sargent, Aaron Milner, Patrick Hirsch, Grace Wu, Tyler Kobida, Toby Carter, Marlowe Munoz Description: It's a cat feeder outside landrum. It should work frequently, but it doesn't. \ud83d\ude22 Cat Feeder Video Analysis Given 500GB of cat videos: find which cats eat the most often? select only the cat clips? secret third thing? WebSocket Kahoot Project Lead: Zack Sargent Crew: Aaron M., Sam L., Fenix P., Emery F., Marlowe M., Toby C. Everyone wants to learn about everything. Description: DUE: Jan 31, Feb 15, March ? An interactive workshop in which: people build 4 buttons with ESP32 - hardware people connect to WebSocket Server - hosting people can participate in a Kahoot-style competition - frontend The repository for this is our Rahoot fork. Code is ready to go, and will be written to the ESP-32s before the presentation, allowing students to focus on wiring up the ESP-32 instead of copying and pasting code. Worm Farm Project Lead: Toby Carter Crew: Malachi N., Grace W., Emery F., Leah J., Aaron M., Zack Sargent., Patrick H. Description: Using the brains available from https://openworm.org/ , create a worm farm or something that utilizes simulated brains. That would be cool. https://github.com/heyseth/worm-sim It was so good they made a sequel: https://www.geppetto.org/ Timeline: Let's figure this out later in the semester, maybe Worm Midterms??? Joseph's $5 Keyboard Project Project Lead: Joseph G. Crew: ??? Description: Get a $5 keyboard from Five-Below, and do something with it. Possibly MIDI-based? BCI - Brain Computer Interface for Prosthetics Project Lead: Aaron Milner Crew: Zack Sargent (tentative), Malachi, Sam L. Description: This is a personal project about building an arm controlled via BCI. Room Automation Project Lead: ??? Description: Work on automating the club room with: Voice automation Cool stuff Throwflame Thermonator robot (Duke Energy) Project Lead: Aaron Milner Emery Frondorf Crew: Brooke, Will, Sam, Clove, Toby, Neale (for art!!), Malachi N. Description: Duke Energy wants us to do something with Throwflame robot. The leadership position here would involve partially figuring out what Duke wants us to do. Hydrogen sensor strapped to dog LoRa analysis (Duke Energy) Project Lead: Tyler Kobida Description: Duke Energy wants us to do something with LoRa. The leadership position here would involve partially figuring out what Duke wants us to do. Completion of this project would likely involve some sort of produced document or data analysis report. Time in Remote Locations (Duke Energy) Project Lead: Zack is doing this with his group for Raspberry Pi IoT Description: Duke Energy wants us to work with figuring out how to get time precisely in remote locations. The leadership position here would involve partially figuring out what Duke wants us to do. Do cool things with Flipper Zeros Project Lead: Tyler K. Crew: Zack S., Malachi N., Sam, Neale, Patrick H. Description: One person figures out how to do cool stuff with Flipper Zeros, and then spends time helping other people learn about them. Repair Davy's Headphones? Much to think about. Future Projects Something using the requested logical debugger Creating circuit boards using the reflow soldering oven","title":"Projects Overview"},{"location":"projects/0-project-overview/#projects-overview","text":"Here is the list of projects that we are considering in Spring 2025. We are looking for leadership positions.","title":"Projects Overview"},{"location":"projects/0-project-overview/#printer-tower","text":"Project Lead: Tyler Kobida Discuss","title":"Printer Tower"},{"location":"projects/0-project-overview/#robot-john","text":"Project Lead: Izaac Gomez Discuss","title":"Robot John"},{"location":"projects/0-project-overview/#cat-feeder","text":"Project Lead: Izaac Gomez Clove Natale Crew: Zack Sargent, Aaron Milner, Patrick Hirsch, Grace Wu, Tyler Kobida, Toby Carter, Marlowe Munoz Description: It's a cat feeder outside landrum. It should work frequently, but it doesn't. \ud83d\ude22","title":"Cat Feeder"},{"location":"projects/0-project-overview/#cat-feeder-video-analysis","text":"Given 500GB of cat videos: find which cats eat the most often? select only the cat clips? secret third thing?","title":"Cat Feeder Video Analysis"},{"location":"projects/0-project-overview/#websocket-kahoot","text":"Project Lead: Zack Sargent Crew: Aaron M., Sam L., Fenix P., Emery F., Marlowe M., Toby C. Everyone wants to learn about everything. Description: DUE: Jan 31, Feb 15, March ? An interactive workshop in which: people build 4 buttons with ESP32 - hardware people connect to WebSocket Server - hosting people can participate in a Kahoot-style competition - frontend The repository for this is our Rahoot fork. Code is ready to go, and will be written to the ESP-32s before the presentation, allowing students to focus on wiring up the ESP-32 instead of copying and pasting code.","title":"WebSocket Kahoot"},{"location":"projects/0-project-overview/#worm-farm","text":"Project Lead: Toby Carter Crew: Malachi N., Grace W., Emery F., Leah J., Aaron M., Zack Sargent., Patrick H. Description: Using the brains available from https://openworm.org/ , create a worm farm or something that utilizes simulated brains. That would be cool. https://github.com/heyseth/worm-sim It was so good they made a sequel: https://www.geppetto.org/ Timeline: Let's figure this out later in the semester, maybe Worm Midterms???","title":"Worm Farm"},{"location":"projects/0-project-overview/#josephs-5-keyboard-project","text":"Project Lead: Joseph G. Crew: ??? Description: Get a $5 keyboard from Five-Below, and do something with it. Possibly MIDI-based?","title":"Joseph's $5 Keyboard Project"},{"location":"projects/0-project-overview/#bci-brain-computer-interface-for-prosthetics","text":"Project Lead: Aaron Milner Crew: Zack Sargent (tentative), Malachi, Sam L. Description: This is a personal project about building an arm controlled via BCI.","title":"BCI - Brain Computer Interface for Prosthetics"},{"location":"projects/0-project-overview/#room-automation","text":"Project Lead: ??? Description: Work on automating the club room with: Voice automation Cool stuff","title":"Room Automation"},{"location":"projects/0-project-overview/#throwflame-thermonator-robot-duke-energy","text":"Project Lead: Aaron Milner Emery Frondorf Crew: Brooke, Will, Sam, Clove, Toby, Neale (for art!!), Malachi N. Description: Duke Energy wants us to do something with Throwflame robot. The leadership position here would involve partially figuring out what Duke wants us to do. Hydrogen sensor strapped to dog","title":"Throwflame Thermonator robot (Duke Energy)"},{"location":"projects/0-project-overview/#lora-analysis-duke-energy","text":"Project Lead: Tyler Kobida Description: Duke Energy wants us to do something with LoRa. The leadership position here would involve partially figuring out what Duke wants us to do. Completion of this project would likely involve some sort of produced document or data analysis report.","title":"LoRa analysis (Duke Energy)"},{"location":"projects/0-project-overview/#time-in-remote-locations-duke-energy","text":"Project Lead: Zack is doing this with his group for Raspberry Pi IoT Description: Duke Energy wants us to work with figuring out how to get time precisely in remote locations. The leadership position here would involve partially figuring out what Duke wants us to do.","title":"Time in Remote Locations (Duke Energy)"},{"location":"projects/0-project-overview/#do-cool-things-with-flipper-zeros","text":"Project Lead: Tyler K. Crew: Zack S., Malachi N., Sam, Neale, Patrick H. Description: One person figures out how to do cool stuff with Flipper Zeros, and then spends time helping other people learn about them.","title":"Do cool things with Flipper Zeros"},{"location":"projects/0-project-overview/#repair-davys-headphones","text":"Much to think about.","title":"Repair Davy's Headphones?"},{"location":"projects/0-project-overview/#future-projects","text":"","title":"Future Projects"},{"location":"projects/0-project-overview/#something-using-the-requested-logical-debugger","text":"","title":"Something using the requested logical debugger"},{"location":"projects/0-project-overview/#creating-circuit-boards-using-the-reflow-soldering-oven","text":"","title":"Creating circuit boards using the reflow soldering oven"},{"location":"projects/rust-on-esp32/","text":"Rust on ESP32s Why would you want to use Rust ? TL;DR: The performance of C++, with better safety. Also, it's cool. \ud83e\udd80 \ud83e\udd80 \ud83e\udd80 An associated GitHub repo was created at https://github.com/Norse-IoT/rust-on-esp32 . Installation Instructions The following instructions were taken from https://github.com/esp-rs/rust-build#rust-build . Using Rust for ESP32 Step 0: install Rust & Cargo from RustUp - Go to https://rustup.rs/ Step 1: Install espup cargo install espup espup install # To install Espressif Rust ecosystem # [Unix]: Source the following file in every terminal before building a project . $HOME /export-esp.sh Step 2: RISC-V Installation rustup target add riscv32imc-unknown-none-elf Step 3: The Cargo First Approach cargo install cargo-generate # STD Project cargo generate esp-rs/esp-idf-template cargo # NO-STD (Bare-metal) Project cargo generate esp-rs/esp-template cargo espflash flash <SERIAL> # for me, this was cargo espflash flash --port /dev/ttyUSB0 Internal Blink project The standard sanity check after creating a new project is to create a project that blinks the internal led. In Rust, we can use: //! Blinks the internal led (GPIO pin 2) //! built for ESP32 //! modified from https://github.com/esp-rs/esp-idf-hal/blob/master/examples/blinky.rs //! by Zack Sargent use esp_idf_hal :: delay :: FreeRtos ; use esp_idf_hal :: gpio :: * ; use esp_idf_hal :: peripherals :: Peripherals ; fn main () -> anyhow :: Result < () > { /* setup - runs once on board start */ // It is necessary to call this function once. Otherwise some patches to the runtime // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71 esp_idf_hal :: sys :: link_patches (); esp_idf_svc :: log :: EspLogger :: initialize_default (); // initalize logger // The `?` at the end of the following lines means: // \"If this function returns an error, stop the main function and return that error.\" // It's like throwing an exception. let peripherals = Peripherals :: take () ? ; // get list of peripherals let mut led = PinDriver :: output ( peripherals . pins . gpio2 ) ? ; // take the GPIO pin 2 as an output device log :: info ! ( \"Connected! Blinking..\" ); /* loop - equivalent to a `while(true)` loop in C++ */ loop { led . set_high () ? ; FreeRtos :: delay_ms ( 1000 ); led . set_low () ? ; FreeRtos :: delay_ms ( 1000 ); } } // run with `cargo run` or `cargo espflash flash --port <SERIAL>`","title":"Rust on ESP32s"},{"location":"projects/rust-on-esp32/#rust-on-esp32s","text":"Why would you want to use Rust ? TL;DR: The performance of C++, with better safety. Also, it's cool. \ud83e\udd80 \ud83e\udd80 \ud83e\udd80 An associated GitHub repo was created at https://github.com/Norse-IoT/rust-on-esp32 .","title":"Rust on ESP32s"},{"location":"projects/rust-on-esp32/#installation-instructions","text":"The following instructions were taken from https://github.com/esp-rs/rust-build#rust-build .","title":"Installation Instructions"},{"location":"projects/rust-on-esp32/#using-rust-for-esp32","text":"Step 0: install Rust & Cargo from RustUp - Go to https://rustup.rs/ Step 1: Install espup cargo install espup espup install # To install Espressif Rust ecosystem # [Unix]: Source the following file in every terminal before building a project . $HOME /export-esp.sh Step 2: RISC-V Installation rustup target add riscv32imc-unknown-none-elf Step 3: The Cargo First Approach cargo install cargo-generate # STD Project cargo generate esp-rs/esp-idf-template cargo # NO-STD (Bare-metal) Project cargo generate esp-rs/esp-template cargo espflash flash <SERIAL> # for me, this was cargo espflash flash --port /dev/ttyUSB0","title":"Using Rust for ESP32"},{"location":"projects/rust-on-esp32/#internal-blink-project","text":"The standard sanity check after creating a new project is to create a project that blinks the internal led. In Rust, we can use: //! Blinks the internal led (GPIO pin 2) //! built for ESP32 //! modified from https://github.com/esp-rs/esp-idf-hal/blob/master/examples/blinky.rs //! by Zack Sargent use esp_idf_hal :: delay :: FreeRtos ; use esp_idf_hal :: gpio :: * ; use esp_idf_hal :: peripherals :: Peripherals ; fn main () -> anyhow :: Result < () > { /* setup - runs once on board start */ // It is necessary to call this function once. Otherwise some patches to the runtime // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71 esp_idf_hal :: sys :: link_patches (); esp_idf_svc :: log :: EspLogger :: initialize_default (); // initalize logger // The `?` at the end of the following lines means: // \"If this function returns an error, stop the main function and return that error.\" // It's like throwing an exception. let peripherals = Peripherals :: take () ? ; // get list of peripherals let mut led = PinDriver :: output ( peripherals . pins . gpio2 ) ? ; // take the GPIO pin 2 as an output device log :: info ! ( \"Connected! Blinking..\" ); /* loop - equivalent to a `while(true)` loop in C++ */ loop { led . set_high () ? ; FreeRtos :: delay_ms ( 1000 ); led . set_low () ? ; FreeRtos :: delay_ms ( 1000 ); } } // run with `cargo run` or `cargo espflash flash --port <SERIAL>`","title":"Internal Blink project"},{"location":"projects/techolympics24/","text":"TechOlympics 2024 This guide is designed to assist students with the \"Building the Connected Future with IoT\" session at TechOlympics 2024. Here is the presentation for the session. This is the code for the Internal LED Blink test. Use this code first to ensure that a stable connection exists. int pin = 2; void setup() { pinMode(pin, OUTPUT); } bool state = HIGH; void loop() { digitalWrite(pin, state); state = !state; delay(1000); } STEP 1: Library Pull This section of the code will instruct the ESP32 on what libraries it should pull information from. After including the libraries, the code instructs the board on how to connect to our Norse IoT WiFi server. #define SERIAL_BAUD 115200 #include <DHTesp.h> #include <WiFi.h> #include <ThingsBoard.h> #define DHTTYPE DHT22 // DHT11, DHT22, DHT21 #define DHT_PIN 4 #define TOKEN \"21asd7\" #define THINGSBOARD_SERVER \"10.0.1.2\" #define WIFI_AP_NAME \"\" #define WIFI_PASSWORD \"\" WiFiClient espClient; ThingsBoard tb(espClient); int status = WL_IDLE_STATUS; DHTesp dht; int quant = 20; int send_delay = 2000; int send_passed = 0; STEP 2: Connecting to the Web This step continues the process of connecting the board to the WiFi. void setup() { Serial.begin(SERIAL_BAUD); pinMode(LED_BUILTIN, OUTPUT); WiFi.begin(WIFI_AP_NAME, WIFI_PASSWORD); InitWiFi(); dht.setup(DHT_PIN, DHTesp::DHTTYPE); } STEP 3: Integrating the Server In this section, the ESP32 is connected to our server/WiFi. If the board fails to connect, the serial port will display \"Failed!\" void loop() { delay(quant); send_passed += quant; if (WiFi.status() != WL_CONNECTED) { InitWiFi(); return; } if (!tb.connected()) { Serial.print(\"Connecting to \"); Serial.print(THINGSBOARD_SERVER); Serial.print(\" with token \"); Serial.println(TOKEN); if (!tb.connect(THINGSBOARD_SERVER, TOKEN)) { Serial.println(\"Failed!\"); return; } } STEP 4: Measure and Report Humidity Data First, we check how long it has been since the measurements have last been updated. If it has been long enough, we update the measurements by getting the Temp and Humidity from the ESP32. if (send_passed > send_delay) { Serial.print(\"Sending data \"); TempAndHumidity measurements = dht.getTempAndHumidity(); if (isnan(measurements.humidity) || isnan(measurements.temperature)) { Serial.println(\"**Failed to read DHT sensor!**\"); } else { tb.sendTelemetryFloat(\"temperature\", measurements.temperature); tb.sendTelemetryFloat(\"humidity\", measurements.humidity); Serial.print(measurements.temperature); Serial.print(\"c / \"); Serial.print(measurements.humidity); Serial.println(\"%).\"); blinkLED(1,250,0); } send_passed = 0; } tb.loop(); STEP 5: Ensuring a Stable Connection void InitWiFi() { Serial.println(\"\"); Serial.print(\"Connecting to AP as \"); Serial.print(WiFi.macAddress()); WiFi.begin(WIFI_AP_NAME, WIFI_PASSWORD); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } blinkLED(3,120,120); Serial.println(\"\"); Serial.print(\"Connected to AP with IP address \"); Serial.println(WiFi.localIP()); } STEP 6: Finalize with LED void blinkLED(int numberOfFlashes, int durationOn, int durationOff) { for(int i = 0; i < numberOfFlashes; i++){ digitalWrite(LED_BUILTIN, HIGH); delay(durationOn); digitalWrite(LED_BUILTIN, LOW); delay(durationOff); } } The final expected code will be published here \u2193 #define SERIAL_BAUD 115200 #include <DHTesp.h> #include <WiFi.h> #include <ThingsBoard.h> #define DHTTYPE DHT22 // DHT11, DHT22, DHT21 #define DHT_PIN 4 #define TOKEN \"21asd7\" #define THINGSBOARD_SERVER \"10.0.1.2\" #define WIFI_AP_NAME \"\" #define WIFI_PASSWORD \"\" WiFiClient espClient; ThingsBoard tb(espClient); int status = WL_IDLE_STATUS; DHTesp dht; int quant = 20; int send_delay = 2000; int send_passed = 0; void setup() { Serial.begin(SERIAL_BAUD); pinMode(LED_BUILTIN, OUTPUT); WiFi.begin(WIFI_AP_NAME, WIFI_PASSWORD); InitWiFi(); dht.setup(DHT_PIN, DHTesp::DHTTYPE); } void loop() { delay(quant); send_passed += quant; if (WiFi.status() != WL_CONNECTED) { InitWiFi(); return; } if (!tb.connected()) { Serial.print(\"Connecting to \"); Serial.print(THINGSBOARD_SERVER); Serial.print(\" with token \"); Serial.println(TOKEN); if (!tb.connect(THINGSBOARD_SERVER, TOKEN)) { Serial.println(\"Failed!\"); return; } } if (send_passed > send_delay) { Serial.print(\"Sending data \"); TempAndHumidity measurements = dht.getTempAndHumidity(); if (isnan(measurements.humidity) || isnan(measurements.temperature)) { Serial.println(\"**Failed to read DHT sensor!**\"); } else { tb.sendTelemetryFloat(\"temperature\", measurements.temperature); tb.sendTelemetryFloat(\"humidity\", measurements.humidity); Serial.print(measurements.temperature); Serial.print(\"c / \"); Serial.print(measurements.humidity); Serial.println(\"%).\"); blinkLED(1,250,0); } send_passed = 0; } tb.loop(); } void InitWiFi() { Serial.println(\"\"); Serial.print(\"Connecting to AP as \"); Serial.print(WiFi.macAddress()); WiFi.begin(WIFI_AP_NAME, WIFI_PASSWORD); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } blinkLED(3,120,120); Serial.println(\"\"); Serial.print(\"Connected to AP with IP address \"); Serial.println(WiFi.localIP()); } void blinkLED(int numberOfFlashes, int durationOn, int durationOff) { for(int i = 0; i < numberOfFlashes; i++){ digitalWrite(LED_BUILTIN, HIGH); delay(durationOn); digitalWrite(LED_BUILTIN, LOW); delay(durationOff); } }","title":"TechOlympics 2024"},{"location":"projects/techolympics24/#techolympics-2024","text":"This guide is designed to assist students with the \"Building the Connected Future with IoT\" session at TechOlympics 2024. Here is the presentation for the session. This is the code for the Internal LED Blink test. Use this code first to ensure that a stable connection exists. int pin = 2; void setup() { pinMode(pin, OUTPUT); } bool state = HIGH; void loop() { digitalWrite(pin, state); state = !state; delay(1000); } STEP 1: Library Pull This section of the code will instruct the ESP32 on what libraries it should pull information from. After including the libraries, the code instructs the board on how to connect to our Norse IoT WiFi server. #define SERIAL_BAUD 115200 #include <DHTesp.h> #include <WiFi.h> #include <ThingsBoard.h> #define DHTTYPE DHT22 // DHT11, DHT22, DHT21 #define DHT_PIN 4 #define TOKEN \"21asd7\" #define THINGSBOARD_SERVER \"10.0.1.2\" #define WIFI_AP_NAME \"\" #define WIFI_PASSWORD \"\" WiFiClient espClient; ThingsBoard tb(espClient); int status = WL_IDLE_STATUS; DHTesp dht; int quant = 20; int send_delay = 2000; int send_passed = 0; STEP 2: Connecting to the Web This step continues the process of connecting the board to the WiFi. void setup() { Serial.begin(SERIAL_BAUD); pinMode(LED_BUILTIN, OUTPUT); WiFi.begin(WIFI_AP_NAME, WIFI_PASSWORD); InitWiFi(); dht.setup(DHT_PIN, DHTesp::DHTTYPE); } STEP 3: Integrating the Server In this section, the ESP32 is connected to our server/WiFi. If the board fails to connect, the serial port will display \"Failed!\" void loop() { delay(quant); send_passed += quant; if (WiFi.status() != WL_CONNECTED) { InitWiFi(); return; } if (!tb.connected()) { Serial.print(\"Connecting to \"); Serial.print(THINGSBOARD_SERVER); Serial.print(\" with token \"); Serial.println(TOKEN); if (!tb.connect(THINGSBOARD_SERVER, TOKEN)) { Serial.println(\"Failed!\"); return; } } STEP 4: Measure and Report Humidity Data First, we check how long it has been since the measurements have last been updated. If it has been long enough, we update the measurements by getting the Temp and Humidity from the ESP32. if (send_passed > send_delay) { Serial.print(\"Sending data \"); TempAndHumidity measurements = dht.getTempAndHumidity(); if (isnan(measurements.humidity) || isnan(measurements.temperature)) { Serial.println(\"**Failed to read DHT sensor!**\"); } else { tb.sendTelemetryFloat(\"temperature\", measurements.temperature); tb.sendTelemetryFloat(\"humidity\", measurements.humidity); Serial.print(measurements.temperature); Serial.print(\"c / \"); Serial.print(measurements.humidity); Serial.println(\"%).\"); blinkLED(1,250,0); } send_passed = 0; } tb.loop(); STEP 5: Ensuring a Stable Connection void InitWiFi() { Serial.println(\"\"); Serial.print(\"Connecting to AP as \"); Serial.print(WiFi.macAddress()); WiFi.begin(WIFI_AP_NAME, WIFI_PASSWORD); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } blinkLED(3,120,120); Serial.println(\"\"); Serial.print(\"Connected to AP with IP address \"); Serial.println(WiFi.localIP()); } STEP 6: Finalize with LED void blinkLED(int numberOfFlashes, int durationOn, int durationOff) { for(int i = 0; i < numberOfFlashes; i++){ digitalWrite(LED_BUILTIN, HIGH); delay(durationOn); digitalWrite(LED_BUILTIN, LOW); delay(durationOff); } } The final expected code will be published here \u2193 #define SERIAL_BAUD 115200 #include <DHTesp.h> #include <WiFi.h> #include <ThingsBoard.h> #define DHTTYPE DHT22 // DHT11, DHT22, DHT21 #define DHT_PIN 4 #define TOKEN \"21asd7\" #define THINGSBOARD_SERVER \"10.0.1.2\" #define WIFI_AP_NAME \"\" #define WIFI_PASSWORD \"\" WiFiClient espClient; ThingsBoard tb(espClient); int status = WL_IDLE_STATUS; DHTesp dht; int quant = 20; int send_delay = 2000; int send_passed = 0; void setup() { Serial.begin(SERIAL_BAUD); pinMode(LED_BUILTIN, OUTPUT); WiFi.begin(WIFI_AP_NAME, WIFI_PASSWORD); InitWiFi(); dht.setup(DHT_PIN, DHTesp::DHTTYPE); } void loop() { delay(quant); send_passed += quant; if (WiFi.status() != WL_CONNECTED) { InitWiFi(); return; } if (!tb.connected()) { Serial.print(\"Connecting to \"); Serial.print(THINGSBOARD_SERVER); Serial.print(\" with token \"); Serial.println(TOKEN); if (!tb.connect(THINGSBOARD_SERVER, TOKEN)) { Serial.println(\"Failed!\"); return; } } if (send_passed > send_delay) { Serial.print(\"Sending data \"); TempAndHumidity measurements = dht.getTempAndHumidity(); if (isnan(measurements.humidity) || isnan(measurements.temperature)) { Serial.println(\"**Failed to read DHT sensor!**\"); } else { tb.sendTelemetryFloat(\"temperature\", measurements.temperature); tb.sendTelemetryFloat(\"humidity\", measurements.humidity); Serial.print(measurements.temperature); Serial.print(\"c / \"); Serial.print(measurements.humidity); Serial.println(\"%).\"); blinkLED(1,250,0); } send_passed = 0; } tb.loop(); } void InitWiFi() { Serial.println(\"\"); Serial.print(\"Connecting to AP as \"); Serial.print(WiFi.macAddress()); WiFi.begin(WIFI_AP_NAME, WIFI_PASSWORD); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\".\"); } blinkLED(3,120,120); Serial.println(\"\"); Serial.print(\"Connected to AP with IP address \"); Serial.println(WiFi.localIP()); } void blinkLED(int numberOfFlashes, int durationOn, int durationOff) { for(int i = 0; i < numberOfFlashes; i++){ digitalWrite(LED_BUILTIN, HIGH); delay(durationOn); digitalWrite(LED_BUILTIN, LOW); delay(durationOff); } }","title":"TechOlympics 2024"},{"location":"projects/techolympics25/","text":"TechOlympics 2025 This guide is a writeup of the the \"Norse IoT Websocket Workshop\" session at TechOlympics 2025. Here is the presentation for the session. These docs go over the same content as the slide deck. This session fits in a 60 to 90 minute time slot. Here's the pitch: Are you interested in building your very own smart device? This session allows you to learn how to build your very own Wi-Fi enabled game controller, and even play Kahoot with it! You'll be able to get hands on with real Internet of Things technologies, including ESP-32 (like Arduino) microcontrollers. This session will focus on wiring the devices, and no prior coding or electronics experience is required, members from the Norse IoT Club at Northern Kentucky University will be there to walk you through every part of the process. So, what is IoT? The Internet of Things (IoT) describes the network of physical objects \u2014 \"things\" \u2014 that are embedded with sensors, software, and other technologies for the purpose of connecting and exchanging data with other devices and systems over the internet. IoT Devices range from ordinary household objects to sophisticated industrial tools. Oracle estimates there will be 10 billion connected IoT devices today; 22 billion by 2025. What are we using? We're using ESP-32 devices, which strike a good balance between power and cost effiency. ESP-32s are a powerful, lightweight chip, anda re useful for many scenarios. They're Wi-Fi/Bluetooth/Matter enabled allowing for various projects. What are we building? A Wi-Fi Enabled Game Controller Will feature four buttons to send responses and a buzzer to communicate right/wrong. Will send data to an open-source Kahoot clone through Websockets. Will receive data (correct/incorrect) and make a noise. The Code Participants had the code pre-downloaded onto their ESP-32s. If you're looking to follow along at home, you'll need to clone our Rahoot repo , and use Arduino IDE to image your ESP-32 with the client code . For more info, try out our Getting Started guide. You'll also need to add a secrets.h file to the same folder as the rest of your ESP-32 code. The content of that file should be the following, with your Wi-Fi details substituted for the dummy passwords shown here: const char * SSID = \"YOURROUTERNAMEHERE\" ; const char * WIFI_PASSWORD = \"YOURROUTERPASSWORDHERE\" ; You'll also need a webserver running our fork of Rahoot. Follow the repo's Getting Started guide for more information. The Rahoot server receives data over Websockets and displays it on a website. The Hardware 1x ESP-32 1x Breadboard 1x Buzzer 4x Button 1x Jumper Wires Wires Wires are used to connect one point to another. Breadboards Breadboards allows for easy and adaptable assembly of the microcontroller with input and output devices. Vertical rails, on the left and right sides, connect vertically, and horizontal rails, in the center, connect horizontally. We'll use one breadboard. Buzzer Passive buzzers can play tones! (Active buzzers cannot play tones) We'll use one passive buzzer. Button Buttons are, well, buttons! Pressing them sends a signal that the ESP can read. We'll use four buttons. The Software Arduino Software As mentioned, the ESP-32s are running C++ code that reads data from buttons and sends the data over Wi-Fi through Websockets. Websockets Websockets are an API that allows for a client and server to maintain constant communication. Websockets are used in applications like\u2026 Discord, to allow real time communication between you and your friends Minecraft server consoles, to get live updates on your server. Let's build it! Step 1: Pull out the breadboard Go ahead and pull out your breadboard. This will be the base for your project. Step 2: Put on ESP-32 Insert the ESP-32 into the breadboard. The bottom of the ESP-32 (the side with the USB port), should be aligned with row 1, with one corner on column b and the other corner on column i. Do not force it. There is potential to break a pin. Step 3: Put on Buttons Take the buttons one step at a time. The pins on the buttons are quite delicate, and while you should avoid breaking them if possible, do not be surprised if one or two are snapped. Insert your first button with the top left corner at b25, bottom left corner at b27, top right corner at e25, and bottom right corner at e27. Insert your second button with the top left corner at b28, bottom left corner at b30, top right corner at e30, and bottom right corner at e30. Insert your third button with the top left corner at f25, bottom left corner at f27, top right corner at i25, and bottom right corner at i27. Insert your fourth button with the top left corner at f28, bottom left corner at f30, top right corner at i30, and bottom right corner at i30. Step 4: Attach Ground Wires We'll then move on to wiring up ground wires. Ground wires are used to ground our buttons, giving them a baseline reading of zero to read off of. Wire from a19 to the left negative rail. Wire from a22 to the left negative rail. Wire from a25 to the left negative rail. Wire from a30 to the left negative rail. Step 5: Attach Buzzer We'll now go ahead and attach the buzzer. The buzzer has two pins and we'll place the buzzer on slots e22 and f22, straddling the divide between the two sections of breadboard. Step 6: Attach Ground Wires We have a few more ground wires for the other side. Wire from j6 to the right negative rail. Wire from j25 to the right negative rail. Wire from j30 to the right negative rail. Step 7: Attach Data Wires Now we move on to attaching data wires. The ESP-32 will use this to read the data from the buttons. Wire from a18 to a28. Wire from a17 to a27. Step 8: Attach Data Wires Now we move on to attaching data wires. The ESP-32 will use this to read the data from the buttons. Wire from a13 to a28. Wire from a12 to a27. Step 9: Attach Power Wire Now we can wire up power for our buzzer. The ESP-32 provides five volts of power on pin a11, that we will provide to our buzzer. Wire from a11 to a22. Step 10: Play! You can now plug in your ESP-32 to power and it will connect to Wi-Fi and then to the Rahoot server. If you rotate your breadboard so the USB port is facing to the left, you can use the buttons to play Rahoot.","title":"TechOlympics 2025"},{"location":"projects/techolympics25/#techolympics-2025","text":"This guide is a writeup of the the \"Norse IoT Websocket Workshop\" session at TechOlympics 2025. Here is the presentation for the session. These docs go over the same content as the slide deck. This session fits in a 60 to 90 minute time slot. Here's the pitch: Are you interested in building your very own smart device? This session allows you to learn how to build your very own Wi-Fi enabled game controller, and even play Kahoot with it! You'll be able to get hands on with real Internet of Things technologies, including ESP-32 (like Arduino) microcontrollers. This session will focus on wiring the devices, and no prior coding or electronics experience is required, members from the Norse IoT Club at Northern Kentucky University will be there to walk you through every part of the process.","title":"TechOlympics 2025"},{"location":"projects/techolympics25/#so-what-is-iot","text":"The Internet of Things (IoT) describes the network of physical objects \u2014 \"things\" \u2014 that are embedded with sensors, software, and other technologies for the purpose of connecting and exchanging data with other devices and systems over the internet. IoT Devices range from ordinary household objects to sophisticated industrial tools. Oracle estimates there will be 10 billion connected IoT devices today; 22 billion by 2025.","title":"So, what is IoT?"},{"location":"projects/techolympics25/#what-are-we-using","text":"We're using ESP-32 devices, which strike a good balance between power and cost effiency. ESP-32s are a powerful, lightweight chip, anda re useful for many scenarios. They're Wi-Fi/Bluetooth/Matter enabled allowing for various projects.","title":"What are we using?"},{"location":"projects/techolympics25/#what-are-we-building","text":"A Wi-Fi Enabled Game Controller Will feature four buttons to send responses and a buzzer to communicate right/wrong. Will send data to an open-source Kahoot clone through Websockets. Will receive data (correct/incorrect) and make a noise.","title":"What are we building?"},{"location":"projects/techolympics25/#the-code","text":"Participants had the code pre-downloaded onto their ESP-32s. If you're looking to follow along at home, you'll need to clone our Rahoot repo , and use Arduino IDE to image your ESP-32 with the client code . For more info, try out our Getting Started guide. You'll also need to add a secrets.h file to the same folder as the rest of your ESP-32 code. The content of that file should be the following, with your Wi-Fi details substituted for the dummy passwords shown here: const char * SSID = \"YOURROUTERNAMEHERE\" ; const char * WIFI_PASSWORD = \"YOURROUTERPASSWORDHERE\" ; You'll also need a webserver running our fork of Rahoot. Follow the repo's Getting Started guide for more information. The Rahoot server receives data over Websockets and displays it on a website.","title":"The Code"},{"location":"projects/techolympics25/#the-hardware","text":"1x ESP-32 1x Breadboard 1x Buzzer 4x Button 1x Jumper Wires","title":"The Hardware"},{"location":"projects/techolympics25/#wires","text":"Wires are used to connect one point to another.","title":"Wires"},{"location":"projects/techolympics25/#breadboards","text":"Breadboards allows for easy and adaptable assembly of the microcontroller with input and output devices. Vertical rails, on the left and right sides, connect vertically, and horizontal rails, in the center, connect horizontally. We'll use one breadboard.","title":"Breadboards"},{"location":"projects/techolympics25/#buzzer","text":"Passive buzzers can play tones! (Active buzzers cannot play tones) We'll use one passive buzzer.","title":"Buzzer"},{"location":"projects/techolympics25/#button","text":"Buttons are, well, buttons! Pressing them sends a signal that the ESP can read. We'll use four buttons.","title":"Button"},{"location":"projects/techolympics25/#the-software","text":"","title":"The Software"},{"location":"projects/techolympics25/#arduino-software","text":"As mentioned, the ESP-32s are running C++ code that reads data from buttons and sends the data over Wi-Fi through Websockets.","title":"Arduino Software"},{"location":"projects/techolympics25/#websockets","text":"Websockets are an API that allows for a client and server to maintain constant communication. Websockets are used in applications like\u2026 Discord, to allow real time communication between you and your friends Minecraft server consoles, to get live updates on your server.","title":"Websockets"},{"location":"projects/techolympics25/#lets-build-it","text":"","title":"Let's build it!"},{"location":"projects/techolympics25/#step-1-pull-out-the-breadboard","text":"Go ahead and pull out your breadboard. This will be the base for your project.","title":"Step 1: Pull out the breadboard"},{"location":"projects/techolympics25/#step-2-put-on-esp-32","text":"Insert the ESP-32 into the breadboard. The bottom of the ESP-32 (the side with the USB port), should be aligned with row 1, with one corner on column b and the other corner on column i. Do not force it. There is potential to break a pin.","title":"Step 2: Put on ESP-32"},{"location":"projects/techolympics25/#step-3-put-on-buttons","text":"Take the buttons one step at a time. The pins on the buttons are quite delicate, and while you should avoid breaking them if possible, do not be surprised if one or two are snapped. Insert your first button with the top left corner at b25, bottom left corner at b27, top right corner at e25, and bottom right corner at e27. Insert your second button with the top left corner at b28, bottom left corner at b30, top right corner at e30, and bottom right corner at e30. Insert your third button with the top left corner at f25, bottom left corner at f27, top right corner at i25, and bottom right corner at i27. Insert your fourth button with the top left corner at f28, bottom left corner at f30, top right corner at i30, and bottom right corner at i30.","title":"Step 3: Put on Buttons"},{"location":"projects/techolympics25/#step-4-attach-ground-wires","text":"We'll then move on to wiring up ground wires. Ground wires are used to ground our buttons, giving them a baseline reading of zero to read off of. Wire from a19 to the left negative rail. Wire from a22 to the left negative rail. Wire from a25 to the left negative rail. Wire from a30 to the left negative rail.","title":"Step 4: Attach Ground Wires"},{"location":"projects/techolympics25/#step-5-attach-buzzer","text":"We'll now go ahead and attach the buzzer. The buzzer has two pins and we'll place the buzzer on slots e22 and f22, straddling the divide between the two sections of breadboard.","title":"Step 5: Attach Buzzer"},{"location":"projects/techolympics25/#step-6-attach-ground-wires","text":"We have a few more ground wires for the other side. Wire from j6 to the right negative rail. Wire from j25 to the right negative rail. Wire from j30 to the right negative rail.","title":"Step 6: Attach Ground Wires"},{"location":"projects/techolympics25/#step-7-attach-data-wires","text":"Now we move on to attaching data wires. The ESP-32 will use this to read the data from the buttons. Wire from a18 to a28. Wire from a17 to a27.","title":"Step 7: Attach Data Wires"},{"location":"projects/techolympics25/#step-8-attach-data-wires","text":"Now we move on to attaching data wires. The ESP-32 will use this to read the data from the buttons. Wire from a13 to a28. Wire from a12 to a27.","title":"Step 8: Attach Data Wires"},{"location":"projects/techolympics25/#step-9-attach-power-wire","text":"Now we can wire up power for our buzzer. The ESP-32 provides five volts of power on pin a11, that we will provide to our buzzer. Wire from a11 to a22.","title":"Step 9: Attach Power Wire"},{"location":"projects/techolympics25/#step-10-play","text":"You can now plug in your ESP-32 to power and it will connect to Wi-Fi and then to the Rahoot server. If you rotate your breadboard so the USB port is facing to the left, you can use the buttons to play Rahoot.","title":"Step 10: Play!"},{"location":"projects/websiteworkshops/","text":"Website Workshops Basics NKU offers free static website hosting for students and faculty. These instructions will show you how to connect to the drive and make a basic resume page. Connecting to the Drive Windows 10 Be sure you\u2019re connected to NORSE-NET before connecting to the drive. Open File Explorer. Click on \"This PC\". At the top menu select \"Map Network Drive.\" In the Folder field, enter the server name: \\studenthome.nku.edu\\username Your username is your NKU username, i.e. \\studenthome.nku.edu\\godstedc1 Click Finish. Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 OR If you have an NKU provided computer, just use your NKU username. The drive will show up in a new window. Windows 11 Be sure you\u2019re connected to NORSE-NET before connecting to the drive. Open File Explorer. Click on \"This PC\". At the top menu select \"Map Network Drive.\" In the Folder field, enter the server name: \\studenthome.nku.edu\\username Your username is your NKU username, i.e. \\studenthome.nku.edu\\godstedc1 Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 OR If you have an NKU provided computer, just use your NKU username. The drive will show up in a new window. Mac Be sure you\u2019re connected to NORSE-NET before connecting to the drive. From the Finder app, choose Go from the top navigation menu, and choose connect to server. In the folder field, type smb://studenthome.nku.edu/username Your username is your NKU username, i.e. godstedc1 Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 OR If you have an NKU provided computer, just use your NKU username. It will open Finder. In the left menu under Locations will be studenthome.nku.edu. Linux (Debian/PopOS/Ubuntu) Be sure you\u2019re connected to NORSE-NET before connecting to the drive. Open Files, and choose Other Locations Under Connect To Server, enter the server name: smb\\studenthome.nku.edu\\username Your username is your NKU username, i.e. smb\\studenthome.nku.edu\\godstedc1 Change \u201cConnect As\u201d to Registered User. Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 The drive will open in the current window. ChromeOS Be sure you\u2019re connected to NORSE_NET before connecting to the drive. Open Settings > Files > Network file shares > Add file share. Under File Share URL, enter the server name: smb://studenthome.nku.edu\\username Your username is your NKU username, i.e. smb://studenthome.nku.edu\\godstedc1 Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 Open the Files App. The network drive should appear in the left sidebar. Final Notes Once you are connected to the network drive, it can be accessed just like any other drive connected to your computer. Files can be copied and pasted like you would to a flash drive. Editing Guide Anything you add to the page will be accessible on the global internet through https://studenthome.nku.edu/~username/ Editing the Template For this guide, we will create a basic resume page based off of a template. Visit the Workshop Template page and choose a design. Each template has three colour options, so choose the colour/design you prefer. Once you have one you like, click the download button at the top. If you don\u2019t like any of the templates, you can use Google Docs or Microsoft Word to design your own. Do note that as these are not designed to be web page editors, it might not look good on all platforms. Instructions are available below. To edit the file, we recommend using Visual Studio Code. It is available for all platforms, including ChromeOS through a web app. You can use Notepad, but the interface will be less user friendly. Open the file in Visual Studio Code (or Notepad) https://norseiot.club/Website-Workshops/Instructions/images/image4.png The first half of the template contains the design - or CSS code. The second half contains the content and structure of the document - or HTML code. Scroll down past the CSS to the <main> tag. (You can use CTRL-F) From here, you can change the document to reflect your own name, work experience, and education. If you want to add additional work experiences, or education, just copy everything from First Job Begin to First Job End, and paste it immediately following First Job End, before the </section> tag. You can preview your changes by opening your index.html file in your browser. Once both are open, you can save the file in Visual Studio Code (or Notepad), and then refresh your browser to see the changes. Uploading to the Drive Once you are finished editing the file, go back to your network drive, and open the WWW folder. Anything in this folder will be accessible on the internet, and anything named index will be shown when you go to the root directory - meaning when you just connect to https://studenthome.nku.edu/~username/. Start by removing the index.php file in the directory. We\u2019ll be replacing it with the index.html file that we created. Copy the index.html file that you edited from your Downloads folder to the WWW folder on your network drive. Congrats, you\u2019re done! Additional Notes GitHub Pages Guide If you are unable to connect to your network drive, or want to ensure you can keep your site even after you graduate, you can use GitHub Pages in order to host your site on their servers. First, sign up on GitHub. Then, create a new repository (a place to store your website\u2019s code) For repository name, enter yourgithubusername.github.io For me, that would be congodsted.github.io Leave all the settings as default, and choose Create Repository. You can either use the GitHub Desktop app to synchronise your changes, or just upload your files directly. For now, we\u2019ll just upload our site there. From your repository, click Add Files, and choose Upload Files. Either drag and drop your files into the provided box, or click to find them on your machine like you would on Canvas or Google Drive. If you want, you can add a description of your changes in the first textbox. Click commit changes. You\u2019re done! Head to yourgithubusername.github.io and see your site. Using Word or Google Docs If you don\u2019t like any of the provided templates, you\u2019re welcome to either write your own from scratch or design one in Word or Google Docs. Both let you export an HTML file that you can use. This file might not look as good though, as neither are designed for web design. Save the file as index.html, and return to Uploading to the Drive.","title":"Website Workshops"},{"location":"projects/websiteworkshops/#website-workshops","text":"","title":"Website Workshops"},{"location":"projects/websiteworkshops/#basics","text":"NKU offers free static website hosting for students and faculty. These instructions will show you how to connect to the drive and make a basic resume page.","title":"Basics"},{"location":"projects/websiteworkshops/#connecting-to-the-drive","text":"","title":"Connecting to the Drive"},{"location":"projects/websiteworkshops/#windows-10","text":"Be sure you\u2019re connected to NORSE-NET before connecting to the drive. Open File Explorer. Click on \"This PC\". At the top menu select \"Map Network Drive.\" In the Folder field, enter the server name: \\studenthome.nku.edu\\username Your username is your NKU username, i.e. \\studenthome.nku.edu\\godstedc1 Click Finish. Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 OR If you have an NKU provided computer, just use your NKU username. The drive will show up in a new window.","title":"Windows 10"},{"location":"projects/websiteworkshops/#windows-11","text":"Be sure you\u2019re connected to NORSE-NET before connecting to the drive. Open File Explorer. Click on \"This PC\". At the top menu select \"Map Network Drive.\" In the Folder field, enter the server name: \\studenthome.nku.edu\\username Your username is your NKU username, i.e. \\studenthome.nku.edu\\godstedc1 Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 OR If you have an NKU provided computer, just use your NKU username. The drive will show up in a new window.","title":"Windows 11"},{"location":"projects/websiteworkshops/#mac","text":"Be sure you\u2019re connected to NORSE-NET before connecting to the drive. From the Finder app, choose Go from the top navigation menu, and choose connect to server. In the folder field, type smb://studenthome.nku.edu/username Your username is your NKU username, i.e. godstedc1 Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 OR If you have an NKU provided computer, just use your NKU username. It will open Finder. In the left menu under Locations will be studenthome.nku.edu.","title":"Mac"},{"location":"projects/websiteworkshops/#linux-debianpoposubuntu","text":"Be sure you\u2019re connected to NORSE-NET before connecting to the drive. Open Files, and choose Other Locations Under Connect To Server, enter the server name: smb\\studenthome.nku.edu\\username Your username is your NKU username, i.e. smb\\studenthome.nku.edu\\godstedc1 Change \u201cConnect As\u201d to Registered User. Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 The drive will open in the current window.","title":"Linux (Debian/PopOS/Ubuntu)"},{"location":"projects/websiteworkshops/#chromeos","text":"Be sure you\u2019re connected to NORSE_NET before connecting to the drive. Open Settings > Files > Network file shares > Add file share. Under File Share URL, enter the server name: smb://studenthome.nku.edu\\username Your username is your NKU username, i.e. smb://studenthome.nku.edu\\godstedc1 Sign in with your NKU credentials. Make sure to put nku\\ before your username, i.e. nku\\godstedc1 Open the Files App. The network drive should appear in the left sidebar.","title":"ChromeOS"},{"location":"projects/websiteworkshops/#final-notes","text":"Once you are connected to the network drive, it can be accessed just like any other drive connected to your computer. Files can be copied and pasted like you would to a flash drive.","title":"Final Notes"},{"location":"projects/websiteworkshops/#editing-guide","text":"Anything you add to the page will be accessible on the global internet through https://studenthome.nku.edu/~username/","title":"Editing Guide"},{"location":"projects/websiteworkshops/#editing-the-template","text":"For this guide, we will create a basic resume page based off of a template. Visit the Workshop Template page and choose a design. Each template has three colour options, so choose the colour/design you prefer. Once you have one you like, click the download button at the top. If you don\u2019t like any of the templates, you can use Google Docs or Microsoft Word to design your own. Do note that as these are not designed to be web page editors, it might not look good on all platforms. Instructions are available below. To edit the file, we recommend using Visual Studio Code. It is available for all platforms, including ChromeOS through a web app. You can use Notepad, but the interface will be less user friendly.","title":"Editing the Template"},{"location":"projects/websiteworkshops/#open-the-file-in-visual-studio-code-or-notepad","text":"https://norseiot.club/Website-Workshops/Instructions/images/image4.png The first half of the template contains the design - or CSS code. The second half contains the content and structure of the document - or HTML code. Scroll down past the CSS to the <main> tag. (You can use CTRL-F) From here, you can change the document to reflect your own name, work experience, and education. If you want to add additional work experiences, or education, just copy everything from First Job Begin to First Job End, and paste it immediately following First Job End, before the </section> tag. You can preview your changes by opening your index.html file in your browser. Once both are open, you can save the file in Visual Studio Code (or Notepad), and then refresh your browser to see the changes.","title":"Open the file in Visual Studio Code (or Notepad)"},{"location":"projects/websiteworkshops/#uploading-to-the-drive","text":"Once you are finished editing the file, go back to your network drive, and open the WWW folder. Anything in this folder will be accessible on the internet, and anything named index will be shown when you go to the root directory - meaning when you just connect to https://studenthome.nku.edu/~username/. Start by removing the index.php file in the directory. We\u2019ll be replacing it with the index.html file that we created. Copy the index.html file that you edited from your Downloads folder to the WWW folder on your network drive. Congrats, you\u2019re done!","title":"Uploading to the Drive"},{"location":"projects/websiteworkshops/#additional-notes","text":"","title":"Additional Notes"},{"location":"projects/websiteworkshops/#github-pages-guide","text":"If you are unable to connect to your network drive, or want to ensure you can keep your site even after you graduate, you can use GitHub Pages in order to host your site on their servers. First, sign up on GitHub. Then, create a new repository (a place to store your website\u2019s code) For repository name, enter yourgithubusername.github.io For me, that would be congodsted.github.io Leave all the settings as default, and choose Create Repository. You can either use the GitHub Desktop app to synchronise your changes, or just upload your files directly. For now, we\u2019ll just upload our site there. From your repository, click Add Files, and choose Upload Files. Either drag and drop your files into the provided box, or click to find them on your machine like you would on Canvas or Google Drive. If you want, you can add a description of your changes in the first textbox. Click commit changes. You\u2019re done! Head to yourgithubusername.github.io and see your site.","title":"GitHub Pages Guide"},{"location":"projects/websiteworkshops/#using-word-or-google-docs","text":"If you don\u2019t like any of the provided templates, you\u2019re welcome to either write your own from scratch or design one in Word or Google Docs. Both let you export an HTML file that you can use. This file might not look as good though, as neither are designed for web design. Save the file as index.html, and return to Uploading to the Drive.","title":"Using Word or Google Docs"},{"location":"resources/3d-printer/","text":"3d Printer This is a draft The printer we used to have was a Original Prusa MK4. We're looking to get it repaired. Zack is loaning an Ender V3 to the club. Nametag Project As an example project to practice 3d printing, you can make a nametag at https://www.nametag-designer.com/ , which will give you a .stl file. Then, you can reference the PRUSA documentation and the official download link to download the Prusa Slicer for your operating system. You're going to want the one for the \"ORIGINAL PRUSA MK4\". I (Zack Sargent) tested version 2.7.4 under \"DRIVERS & APPS 2.7.4\" on Fedora Linux. The appimage \" PrusaSlicer-2.7.4+linux-x64-GTK3-202404050928.AppImage \" worked perfectly first time for me. Setting up the printer's slicer Install this to your system, if available: Select the default: Unless you have more configurations to make, press Finish Adding your file I left everything as the default, and clicked \" Export G-Code \". Then, I got a G-Code file that the printer was able to print, after I put it on a flashdrive.","title":"3d Printer"},{"location":"resources/3d-printer/#3d-printer","text":"This is a draft The printer we used to have was a Original Prusa MK4. We're looking to get it repaired. Zack is loaning an Ender V3 to the club.","title":"3d Printer"},{"location":"resources/3d-printer/#nametag-project","text":"As an example project to practice 3d printing, you can make a nametag at https://www.nametag-designer.com/ , which will give you a .stl file. Then, you can reference the PRUSA documentation and the official download link to download the Prusa Slicer for your operating system. You're going to want the one for the \"ORIGINAL PRUSA MK4\". I (Zack Sargent) tested version 2.7.4 under \"DRIVERS & APPS 2.7.4\" on Fedora Linux. The appimage \" PrusaSlicer-2.7.4+linux-x64-GTK3-202404050928.AppImage \" worked perfectly first time for me.","title":"Nametag Project"},{"location":"resources/3d-printer/#setting-up-the-printers-slicer","text":"Install this to your system, if available: Select the default: Unless you have more configurations to make, press Finish","title":"Setting up the printer's slicer"},{"location":"resources/3d-printer/#adding-your-file","text":"I left everything as the default, and clicked \" Export G-Code \". Then, I got a G-Code file that the printer was able to print, after I put it on a flashdrive.","title":"Adding your file"},{"location":"resources/advanced-wiki-editing/","text":"Editing the Wiki - For Advanced Users While the web editor is sufficient for Markdown editing, users wanting to experiment with advanced HTML formatting will want to run MkDocs locally for a live preview as they work on their changes. As a prerequisite, you will need Python 3 and Pip (comes with Python) installed. For more information, see Python's installation guide for your platform . Install MkDocs MkDocs is the software we use for the wiki. You can install it with the following command. pip install mkdocs Install needed Extensions We use additional extensions, go ahead and install those as well. pip install pymdown-extensions Clone the Wiki You can now download a copy of the Wiki onto your machine. Use the following command, or download it via GitHub Desktop. git clone https://github.com/Norse-IoT/Wiki.git Open the Repository Folder. Open the folder you just downloaded. If you're still in the command line, use this command. cd Wiki Start Live Preview You can use the following command to begin previewing your changes. mkdocs serve Note: if you're on Windows and the command isn't working, you can use the following command instead. python -m mkdocs Once its online, you can go to http://localhost:8000 for a live preview as you make changes in the Wiki folder. Push Changes After making changes, use the following commands to upload to GitHub. git add . git commit -m \"Summary of changes\" git push","title":"Editing the Wiki - For Advanced Users"},{"location":"resources/advanced-wiki-editing/#editing-the-wiki-for-advanced-users","text":"While the web editor is sufficient for Markdown editing, users wanting to experiment with advanced HTML formatting will want to run MkDocs locally for a live preview as they work on their changes. As a prerequisite, you will need Python 3 and Pip (comes with Python) installed. For more information, see Python's installation guide for your platform .","title":"Editing the Wiki - For Advanced Users"},{"location":"resources/advanced-wiki-editing/#install-mkdocs","text":"MkDocs is the software we use for the wiki. You can install it with the following command. pip install mkdocs","title":"Install MkDocs"},{"location":"resources/advanced-wiki-editing/#install-needed-extensions","text":"We use additional extensions, go ahead and install those as well. pip install pymdown-extensions","title":"Install needed Extensions"},{"location":"resources/advanced-wiki-editing/#clone-the-wiki","text":"You can now download a copy of the Wiki onto your machine. Use the following command, or download it via GitHub Desktop. git clone https://github.com/Norse-IoT/Wiki.git","title":"Clone the Wiki"},{"location":"resources/advanced-wiki-editing/#open-the-repository-folder","text":"Open the folder you just downloaded. If you're still in the command line, use this command. cd Wiki","title":"Open the Repository Folder."},{"location":"resources/advanced-wiki-editing/#start-live-preview","text":"You can use the following command to begin previewing your changes. mkdocs serve Note: if you're on Windows and the command isn't working, you can use the following command instead. python -m mkdocs Once its online, you can go to http://localhost:8000 for a live preview as you make changes in the Wiki folder.","title":"Start Live Preview"},{"location":"resources/advanced-wiki-editing/#push-changes","text":"After making changes, use the following commands to upload to GitHub. git add . git commit -m \"Summary of changes\" git push","title":"Push Changes"},{"location":"resources/arduino-ide-alternative/","text":"An Arduino IDE Alternative - PlatformIO For Those Having Trouble Compiling Multiple Different Projects, PlatformIO is an alternative. While Arduino IDE is what most people end up using for development of IOT projects, some users with multiple projects may find it difficult to compile and run every project separately on their computer because of Arduino IDE's bad dependency management. It does not have unique dependencies based on individual projects. Many developers use VSCode regularly anyway, and VSCode has an extension that offers an alternative to Arduino IDE: PlatformIO. PlatformIO has native support for the ESP-IDF frameworks, which is what we mainly use in the club through the ESP32 and ESP8266 boards. The rest of this resource assumes you have VSCode installed. If you don't, please check out the Download Page . Install PlatformIO To install PlatformIO, first navigate to the \"extensions\" tab on the left of the screen with VSCode open and search \"PlatformIO\". The \"PlatformIO IDE\" extension should be the first result. Click install. This might take a while. After installed, you will probably need to restart VSCode. Once installed, there should be a small PlatformIO icon on the left side of your VSCode (it looks like an alien). Click on it, and then under \"Quick Acccess\"->\"PIO Home\" click on \"Open\". This will open the PIO Home tab in your editor, where you can create, delete, and manage projects using IOT. The PIO Home tab will look like this: Install the Libraries for your boards Once you have PlatformIO installed, you should first decide what type of board you want to program on, and you can start this process by going to the \"Boards\" tab on the left of the PlatformIO home page. In Norse IOT we use the ESP8266 Create a new PlatformIO project It is generally unadvised to import projects from the Arduino IDE as they are prone to error and unlikely to follow the standardized format that every PlatformIO project normally has. Instead, it is preferred to always choose \"New Project\" even when migrating code previously developed on the Arduino IDE. From here, the project wizard will show up. Depending on the board you are using this step might be different, but you can always change this later in project settings. Select a Project name and the board that is going to be programmed on, we usually use DOIT ESP32 DEVKIT V1 . Leave the Framework as Arduino. By default, PlatformIO will try to put this project in a default location, but you should probably choose to put it somewhere that is convenient for you. After you have configured the setup, click on \"Finish\" and it should create the project for you. you can navigate to the project folder using File->Open Folder, which should look something like this: Important Information About Every PlatformIO project A few directories and files will be automatically created, including a platformio.ini file. This file contains the configurations for your PlatformIO project, and every project will have one. Inside the project directory, there are 3 main other directories we should know about: src and lib . The src folder will hold all of the Arduino files that you write. Additionally, PlatformIO uses .cpp files instead of .ino files. With this change, it becomes necessary to add the line #include <Arduino.h> to your code. The lib folder will hold every dependency your project has that is not already included in the Arduino suite of built in libraries (as well as every dependency that any other dependency relies on). There should already be a main.cpp file in the src folder, and it should look familiar if you've written Arduino code before, with the setup and loop functions already declared. Notice the added #include <Arduino.h> : From here, development of code should be relatively straightforward, but each specific project will need its own project settings. Change Project Settings Dependencies for your project can be configured from the PlatformIO home page. Most libraries for basically any functionality you need on ESP32 are available through the PlatformIO library manager/search functionality, which you can find in the \"Libraries\" tab on the left.","title":"An Arduino IDE Alternative - PlatformIO"},{"location":"resources/arduino-ide-alternative/#an-arduino-ide-alternative-platformio","text":"For Those Having Trouble Compiling Multiple Different Projects, PlatformIO is an alternative. While Arduino IDE is what most people end up using for development of IOT projects, some users with multiple projects may find it difficult to compile and run every project separately on their computer because of Arduino IDE's bad dependency management. It does not have unique dependencies based on individual projects. Many developers use VSCode regularly anyway, and VSCode has an extension that offers an alternative to Arduino IDE: PlatformIO. PlatformIO has native support for the ESP-IDF frameworks, which is what we mainly use in the club through the ESP32 and ESP8266 boards. The rest of this resource assumes you have VSCode installed. If you don't, please check out the Download Page .","title":"An Arduino IDE Alternative - PlatformIO"},{"location":"resources/arduino-ide-alternative/#install-platformio","text":"To install PlatformIO, first navigate to the \"extensions\" tab on the left of the screen with VSCode open and search \"PlatformIO\". The \"PlatformIO IDE\" extension should be the first result. Click install. This might take a while. After installed, you will probably need to restart VSCode. Once installed, there should be a small PlatformIO icon on the left side of your VSCode (it looks like an alien). Click on it, and then under \"Quick Acccess\"->\"PIO Home\" click on \"Open\". This will open the PIO Home tab in your editor, where you can create, delete, and manage projects using IOT. The PIO Home tab will look like this:","title":"Install PlatformIO"},{"location":"resources/arduino-ide-alternative/#install-the-libraries-for-your-boards","text":"Once you have PlatformIO installed, you should first decide what type of board you want to program on, and you can start this process by going to the \"Boards\" tab on the left of the PlatformIO home page. In Norse IOT we use the ESP8266","title":"Install the Libraries for your boards"},{"location":"resources/arduino-ide-alternative/#create-a-new-platformio-project","text":"It is generally unadvised to import projects from the Arduino IDE as they are prone to error and unlikely to follow the standardized format that every PlatformIO project normally has. Instead, it is preferred to always choose \"New Project\" even when migrating code previously developed on the Arduino IDE. From here, the project wizard will show up. Depending on the board you are using this step might be different, but you can always change this later in project settings. Select a Project name and the board that is going to be programmed on, we usually use DOIT ESP32 DEVKIT V1 . Leave the Framework as Arduino. By default, PlatformIO will try to put this project in a default location, but you should probably choose to put it somewhere that is convenient for you. After you have configured the setup, click on \"Finish\" and it should create the project for you. you can navigate to the project folder using File->Open Folder, which should look something like this:","title":"Create a new PlatformIO project"},{"location":"resources/arduino-ide-alternative/#important-information-about-every-platformio-project","text":"A few directories and files will be automatically created, including a platformio.ini file. This file contains the configurations for your PlatformIO project, and every project will have one. Inside the project directory, there are 3 main other directories we should know about: src and lib . The src folder will hold all of the Arduino files that you write. Additionally, PlatformIO uses .cpp files instead of .ino files. With this change, it becomes necessary to add the line #include <Arduino.h> to your code. The lib folder will hold every dependency your project has that is not already included in the Arduino suite of built in libraries (as well as every dependency that any other dependency relies on). There should already be a main.cpp file in the src folder, and it should look familiar if you've written Arduino code before, with the setup and loop functions already declared. Notice the added #include <Arduino.h> : From here, development of code should be relatively straightforward, but each specific project will need its own project settings.","title":"Important Information About Every PlatformIO project"},{"location":"resources/arduino-ide-alternative/#change-project-settings","text":"Dependencies for your project can be configured from the PlatformIO home page. Most libraries for basically any functionality you need on ESP32 are available through the PlatformIO library manager/search functionality, which you can find in the \"Libraries\" tab on the left.","title":"Change Project Settings"},{"location":"resources/mac-mini-script/","text":"Mac Mini Script In order to image all of the mac minis for TechOlympics, Zack wrote this script on GitHub . It is copied below for reference. There may be a more recent version on GitHub . In the future, we plan to use Chris's Carbon Copy Cloner . #!/bin/bash set -e # this script: # 1. downloads downloads drivers for USB to UART (requires GUI input) # 2. installs Xcode command line tools with homebrew # 3. installs Arduino IDE and adds it to the dock # 4. downloads Arduino CLI # 5. adds board support for ESP32s # # Running this script with sudo minimizes developer interaction # trigger prompt for sudo password before developer walks away sudo ls # install drivers and xcode support first, because they require GUI installers # install USB to UART drivers on Mac ## https://github.com/espressif/arduino-esp32/issues/1084 # from https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads LATEST_DRIVER = \"https://www.silabs.com/documents/public/software/Mac_OSX_VCP_Driver.zip\" curl -L -O \" $LATEST_DRIVER \" unzip Mac_OSX_VCP_Driver.zip cd macOS_VCP_Driver # allow apps to be downloaded from app store or identified developers?? Not enabled yet. idk if this is what I want ## sudo spctl --master-disable hdiutil attach SiLabsUSBDriverDisk.dmg # trigger GUI installation open /Volumes/Silicon \\ Labs \\ VCP \\ Driver \\ Install \\ Disk/Install \\ CP210x \\ VCP \\ Driver.app echo \"hit ENTER to continue\" read # wait for user to finish installation hdiutil detach \"/Volumes/Silicon Labs VCP Driver Install Disk/\" # install xcode support through homebrew (assuming brew is not installed) /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" echo \"this should have automatically installed XCode Command Line Tools. hopefully.\" # Download Arduino IDE image source = \"https://downloads.arduino.cc/arduino-ide/arduino-ide_latest_macOS_64bit.dmg\" curl -L -O \" $source \" echo \"installing dmg\" hdiutil attach arduino-ide_latest_macOS_64bit.dmg echo \"installing app\" sudo cp -R \"/Volumes/Arduino IDE 2.2.1/Arduino IDE.app\" /Applications echo \"detatching img\" hdiutil detach \"/Volumes/Arduino IDE 2.2.1\" # add Arduino IDE to dock for easy access defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Arduino IDE.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' killall Dock echo \"/Users/ $USER /.arduino_cli\" | sudo tee -a /etc/paths mkdir ~/.arduino_cli curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR = ~/.arduino_cli sh source /etc/profile # reload $PATH # install esp32 board support with arduino cli arduino-cli config init arduino-cli config set board_manager.additional_urls \"https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\" arduino-cli config set library.enable_unsafe_install true arduino-cli core update-index arduino-cli core install esp32:esp32 echo \"install script finished!\" date","title":"Mac Mini Script"},{"location":"resources/mac-mini-script/#mac-mini-script","text":"In order to image all of the mac minis for TechOlympics, Zack wrote this script on GitHub . It is copied below for reference. There may be a more recent version on GitHub . In the future, we plan to use Chris's Carbon Copy Cloner . #!/bin/bash set -e # this script: # 1. downloads downloads drivers for USB to UART (requires GUI input) # 2. installs Xcode command line tools with homebrew # 3. installs Arduino IDE and adds it to the dock # 4. downloads Arduino CLI # 5. adds board support for ESP32s # # Running this script with sudo minimizes developer interaction # trigger prompt for sudo password before developer walks away sudo ls # install drivers and xcode support first, because they require GUI installers # install USB to UART drivers on Mac ## https://github.com/espressif/arduino-esp32/issues/1084 # from https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads LATEST_DRIVER = \"https://www.silabs.com/documents/public/software/Mac_OSX_VCP_Driver.zip\" curl -L -O \" $LATEST_DRIVER \" unzip Mac_OSX_VCP_Driver.zip cd macOS_VCP_Driver # allow apps to be downloaded from app store or identified developers?? Not enabled yet. idk if this is what I want ## sudo spctl --master-disable hdiutil attach SiLabsUSBDriverDisk.dmg # trigger GUI installation open /Volumes/Silicon \\ Labs \\ VCP \\ Driver \\ Install \\ Disk/Install \\ CP210x \\ VCP \\ Driver.app echo \"hit ENTER to continue\" read # wait for user to finish installation hdiutil detach \"/Volumes/Silicon Labs VCP Driver Install Disk/\" # install xcode support through homebrew (assuming brew is not installed) /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" echo \"this should have automatically installed XCode Command Line Tools. hopefully.\" # Download Arduino IDE image source = \"https://downloads.arduino.cc/arduino-ide/arduino-ide_latest_macOS_64bit.dmg\" curl -L -O \" $source \" echo \"installing dmg\" hdiutil attach arduino-ide_latest_macOS_64bit.dmg echo \"installing app\" sudo cp -R \"/Volumes/Arduino IDE 2.2.1/Arduino IDE.app\" /Applications echo \"detatching img\" hdiutil detach \"/Volumes/Arduino IDE 2.2.1\" # add Arduino IDE to dock for easy access defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Arduino IDE.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' killall Dock echo \"/Users/ $USER /.arduino_cli\" | sudo tee -a /etc/paths mkdir ~/.arduino_cli curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR = ~/.arduino_cli sh source /etc/profile # reload $PATH # install esp32 board support with arduino cli arduino-cli config init arduino-cli config set board_manager.additional_urls \"https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\" arduino-cli config set library.enable_unsafe_install true arduino-cli core update-index arduino-cli core install esp32:esp32 echo \"install script finished!\" date","title":"Mac Mini Script"},{"location":"resources/maintaining/","text":"Maintaining Club Software As a club, we have a variety of software resources that require maintenance work in order to continue work. This includes our various sites and social media. Websites norseiot.club Serves important information about the club, \"first impression\" for new club members. Static site that runs on GitHub Pages, proxied through CloudFlare. wiki.norseiot.club Serves club documentation for long term projects. Content is generated via MkDocs and runs on GitHub Pages, proxied through CloudFlare. scrum.norseiot.club Serves tasks for active projects. Runs in a docker container on the Norse IoT Oracle Cloud instance, proxied through CloudFlare. Social Media Instagram (norseiot) Semi-active Twitter (@norseiot) Inactive LinkedIn (norse-iot) Inactive Web Accounts GitHub Pages handles web hosting for all static projects like norseiot.club. Anyone set up as an admin in GitHub can adjust settings as needed. Oracle Cloud handles web hosting for all dynamic projects like scrum.norseiot.club. Anyone needing to log in will need the private key, which can be obtained from Chris Brewer or Cassian Godsted. CloudFlare handles DNS, caching, email aliases, and proxy services for the norseiot.club domain. Anyone needing access will need to contact Cassian Godsted.","title":"Maintaining Club Software"},{"location":"resources/maintaining/#maintaining-club-software","text":"As a club, we have a variety of software resources that require maintenance work in order to continue work. This includes our various sites and social media.","title":"Maintaining Club Software"},{"location":"resources/maintaining/#websites","text":"norseiot.club Serves important information about the club, \"first impression\" for new club members. Static site that runs on GitHub Pages, proxied through CloudFlare. wiki.norseiot.club Serves club documentation for long term projects. Content is generated via MkDocs and runs on GitHub Pages, proxied through CloudFlare. scrum.norseiot.club Serves tasks for active projects. Runs in a docker container on the Norse IoT Oracle Cloud instance, proxied through CloudFlare.","title":"Websites"},{"location":"resources/maintaining/#social-media","text":"Instagram (norseiot) Semi-active Twitter (@norseiot) Inactive LinkedIn (norse-iot) Inactive","title":"Social Media"},{"location":"resources/maintaining/#web-accounts","text":"GitHub Pages handles web hosting for all static projects like norseiot.club. Anyone set up as an admin in GitHub can adjust settings as needed. Oracle Cloud handles web hosting for all dynamic projects like scrum.norseiot.club. Anyone needing to log in will need the private key, which can be obtained from Chris Brewer or Cassian Godsted. CloudFlare handles DNS, caching, email aliases, and proxy services for the norseiot.club domain. Anyone needing access will need to contact Cassian Godsted.","title":"Web Accounts"}]}